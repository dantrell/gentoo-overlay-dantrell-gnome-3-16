diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-container.c b/libnautilus-private/nautilus-canvas-container.c
--- a/libnautilus-private/nautilus-canvas-container.c	2015-05-13 13:24:43.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-container.c	2015-11-18 12:13:35.616960458 -0500
@@ -250,6 +250,50 @@
 
 /* Functions dealing with NautilusIcons.  */
 
+static gboolean
+clicked_on_text (NautilusCanvasContainer *container,
+				 NautilusCanvasIcon *icon,
+				 GdkEventButton *event)
+{
+	if (icon == NULL)
+		return FALSE;
+
+	double eventX, eventY;
+	EelDRect icon_rect;
+
+	icon_rect = nautilus_canvas_item_get_text_rectangle (icon->item, TRUE);
+	eel_canvas_window_to_world (EEL_CANVAS (container), event->x, event->y, &eventX, &eventY);
+
+	gboolean ret =  (eventX > icon_rect.x0) &&
+					(eventX < icon_rect.x1) &&
+					(eventY > icon_rect.y0) &&
+					(eventY < icon_rect.y1);
+
+	return ret;
+}
+
+static gboolean
+clicked_on_icon (NautilusCanvasContainer *container,
+				 NautilusCanvasIcon *icon,
+				 GdkEventButton *event)
+{
+	if (icon == NULL)
+		return FALSE;
+
+	double eventX, eventY;
+	EelDRect icon_rect;
+
+	icon_rect = nautilus_canvas_item_get_icon_rectangle (icon->item);
+	eel_canvas_window_to_world (EEL_CANVAS (container), event->x, event->y, &eventX, &eventY);
+
+	gboolean ret =  (eventX > icon_rect.x0) &&
+					(eventX < icon_rect.x1) &&
+					(eventY > icon_rect.y0) &&
+					(eventY < icon_rect.y1);
+
+	return ret;
+}
+
 static void
 icon_free (NautilusCanvasIcon *icon)
 {
@@ -3976,7 +4020,7 @@
 	NautilusCanvasContainer *container;
 	gboolean selection_changed;
 	gboolean return_value;
-	gboolean clicked_on_icon;
+	gboolean clicked_on_item;
 
 	container = NAUTILUS_CANVAS_CONTAINER (widget);
         container->details->button_down_time = event->time;
@@ -3991,7 +4035,7 @@
 	}
 
 	/* Invoke the canvas event handler and see if an item picks up the event. */
-	clicked_on_icon = GTK_WIDGET_CLASS (nautilus_canvas_container_parent_class)->button_press_event (widget, event);
+	clicked_on_item = GTK_WIDGET_CLASS (nautilus_canvas_container_parent_class)->button_press_event (widget, event);
 	
 	/* Move focus to canvas container, unless we're still renaming (to avoid exiting
 	 * renaming mode)
@@ -4000,7 +4044,17 @@
     		gtk_widget_grab_focus (widget);
     	}
 
-	if (clicked_on_icon) {
+    if (clicked_on_item) {
+		NautilusCanvasIcon *icon; // current icon which was clicked on
+
+		/* when icon is in renaming mode and user clicks on the image part of icon renaming should get closed */
+		icon = get_first_selected_icon (container); // this function gets the clicked icon
+
+		if (clicked_on_icon (container, icon, event) &&
+			icon == get_icon_being_renamed (container)) {
+			end_renaming_mode (container, TRUE);
+		}
+
 		return TRUE;
 	}
 
@@ -4066,9 +4120,14 @@
 	gboolean selection_changed;
 	static gint64 last_click_time = 0;
 	static gint click_count = 0;
-	gint double_click_time;
 	gint64 current_time;
-		
+	gint interval;
+
+	/* fetch system double-click time */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
+				  "gtk-double-click-time", &interval,
+				  NULL);
+
 	details = container->details;
 
 	if (details->icon_selected_on_button_down &&
@@ -4094,12 +4153,8 @@
 	if (details->drag_icon != NULL &&
 	    (details->single_click_mode ||
 	     event->button == MIDDLE_BUTTON)) {
-		/* Determine click count */
-		g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
-			      "gtk-double-click-time", &double_click_time,
-			      NULL);
 		current_time = g_get_monotonic_time ();
-		if (current_time - last_click_time < double_click_time * 1000) {
+		if (current_time - last_click_time < interval * 1000) {
 			click_count++;
 		} else {
 			click_count = 0;
@@ -4165,6 +4220,46 @@
 	}
 }
 
+static gboolean
+clicked_within_slow_click_interval_on_text (NautilusCanvasContainer *container, NautilusCanvasIcon *icon, GdkEventButton *event)
+{
+	static gint64 last_slow_click_time = 0;
+	static gint slow_click_count = 0;
+	gint64 current_time;
+	gint interval;
+	gint double_click_interval;
+
+	/* fetch system double-click time */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
+				  "gtk-double-click-time", &double_click_interval,
+				  NULL);
+
+	/* slow click interval is always 2 seconds longer than the system
+	 * double-click interval. */
+
+	interval = double_click_interval + 2000;
+
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_slow_click_time < interval * 1000) {
+		slow_click_count = 1;
+	} else {
+		slow_click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_slow_click_time = current_time;
+
+	/* Only allow second click on text to trigger this */
+	if (slow_click_count == 1 &&
+		icon == get_first_selected_icon (container) &&
+		clicked_on_text (container, icon, event)) {
+		slow_click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
 static void
 clear_drag_state (NautilusCanvasContainer *container)
 {
@@ -5317,6 +5412,47 @@
 	return FALSE;
 }
 
+static gboolean
+handle_canvas_slow_two_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+
+	NautilusFile *file = NAUTILUS_FILE (icon->data);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (event->button != DRAG_BUTTON) {
+		return FALSE;
+	}
+
+	details = container->details;
+
+	if (!details->click_to_rename)
+		return FALSE;
+
+	GList *selection = nautilus_canvas_container_get_selection (container);
+	gint selected_count = g_list_length (selection);
+	g_list_free (selection);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	if (!details->single_click_mode &&
+		clicked_within_slow_click_interval_on_text (container, icon, event) &&
+		details->double_click_icon[0] == details->double_click_icon[1] &&
+		details->double_click_button[0] == details->double_click_button[1]) {
+		if (!button_event_modifies_selection (event)) {
+			nautilus_canvas_container_start_renaming_selected_item (container, FALSE);
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 /* NautilusCanvasIcon event handling.  */
 
 /* Conceptually, pressing button 1 together with CTRL or SHIFT toggles
@@ -5357,7 +5493,8 @@
 		details->double_click_button[0] = event->button;
 	}
 
-	if (handle_canvas_double_click (container, icon, event)) {
+	if (handle_canvas_double_click (container, icon, event) ||
+		handle_canvas_slow_two_click (container, icon, event)) {
 		/* Double clicking does not trigger a D&D action. */
 		details->drag_button = 0;
 		details->drag_icon = NULL;
@@ -7408,6 +7545,15 @@
 	container->details->single_click_mode = single_click_mode;
 }
 
+void
+nautilus_canvas_container_set_click_to_rename_enabled (NautilusCanvasContainer *container,
+													   gboolean enabled)
+{
+	g_return_if_fail (NAUTILUS_IS_CANVAS_CONTAINER (container));
+
+	container->details->click_to_rename = enabled;
+}
+
 /* Return if the canvas container is a fixed size */
 gboolean
 nautilus_canvas_container_get_is_fixed_size (NautilusCanvasContainer *container)
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-container.h b/libnautilus-private/nautilus-canvas-container.h
--- a/libnautilus-private/nautilus-canvas-container.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-container.h	2015-11-18 12:13:35.616960458 -0500
@@ -297,6 +297,8 @@
 									   int                     new_zoom_level);
 void              nautilus_canvas_container_set_single_click_mode         (NautilusCanvasContainer  *container,
 									   gboolean                single_click_mode);
+void              nautilus_canvas_container_set_click_to_rename_enabled   (NautilusCanvasContainer  *container,
+									   gboolean                enabled);
 void              nautilus_canvas_container_enable_linger_selection       (NautilusCanvasContainer  *view,
 									   gboolean                enable);
 gboolean          nautilus_canvas_container_get_is_fixed_size             (NautilusCanvasContainer  *container);
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-private.h b/libnautilus-private/nautilus-canvas-private.h
--- a/libnautilus-private/nautilus-canvas-private.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-private.h	2015-11-18 12:13:35.616960458 -0500
@@ -208,6 +208,7 @@
 	/* Mode settings. */
 	gboolean single_click_mode;
 	gboolean auto_layout;
+	gboolean click_to_rename;
 
 	/* Label position */
 	NautilusCanvasLabelPosition label_position;
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-global-preferences.h b/libnautilus-private/nautilus-global-preferences.h
--- a/libnautilus-private/nautilus-global-preferences.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-global-preferences.h	2015-11-18 12:13:35.616960458 -0500
@@ -50,6 +50,9 @@
 /* Single/Double click preference  */
 #define NAUTILUS_PREFERENCES_CLICK_POLICY			"click-policy"
 
+/* Quick renames with two single clicks and pause in-between*/
+#define NAUTILUS_PREFERENCES_CLICK_TO_RENAME "quick-renames-with-pause-in-between"
+
 /* Activating executable text files */
 #define NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION		"executable-text-activation"
 
diff '--exclude=.git' -urN a/libnautilus-private/org.gnome.nautilus.gschema.xml.in b/libnautilus-private/org.gnome.nautilus.gschema.xml.in
--- a/libnautilus-private/org.gnome.nautilus.gschema.xml.in	2015-05-13 13:24:43.000000000 -0400
+++ b/libnautilus-private/org.gnome.nautilus.gschema.xml.in	2015-11-18 12:13:35.616960458 -0500
@@ -86,6 +86,11 @@
       <_summary>Type of click used to launch/open files</_summary>
       <_description>Possible values are "single" to launch files on a single click,  or "double" to launch them on a double click.</_description>
     </key>
+    <key name="quick-renames-with-pause-in-between" type="b">
+      <default>false</default>
+      <_summary>Enables renaming of icons by two times clicking with pause between clicks</_summary>
+      <_description>If set to true, then icons in all Nemo windows will be able to get renamed quickly. Users should click two times on icons with a pause time more than double-click time of their system.</_description>
+    </key>
     <key name="executable-text-activation" enum="org.gnome.nautilus.ActivationChoice">
       <default>'display'</default>
       <_summary>What to do with executable text files when activated</_summary>
diff '--exclude=.git' -urN a/src/nautilus-canvas-view.c b/src/nautilus-canvas-view.c
--- a/src/nautilus-canvas-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-canvas-view.c	2015-11-18 12:17:10.637822259 -0500
@@ -155,6 +155,7 @@
 									     NautilusFile         *file,
 									     const char           *sort_by);
 static void                 nautilus_canvas_view_update_click_mode            (NautilusCanvasView           *canvas_view);
+static void                 nautilus_canvas_view_update_click_to_rename_mode  (NautilusCanvasView           *canvas_view);
 static gboolean             nautilus_canvas_view_supports_scaling	      (NautilusCanvasView           *canvas_view);
 static void                 nautilus_canvas_view_reveal_selection       (NautilusView               *view);
 static const SortCriterion *get_sort_criterion_by_sort_type           (NautilusFileSortType  sort_type);
@@ -1440,6 +1441,14 @@
 }
 
 static void
+nautilus_canvas_view_click_to_rename_mode_changed (NautilusView *directory_view)
+{
+	g_assert (NAUTILUS_IS_CANVAS_VIEW (directory_view));
+
+	nautilus_canvas_view_update_click_to_rename_mode (NAUTILUS_CANVAS_VIEW (directory_view));
+}
+
+static void
 image_display_policy_changed_callback (gpointer callback_data)
 {
 	NautilusCanvasView *canvas_view;
@@ -1561,6 +1570,21 @@
 						       click_mode == NAUTILUS_CLICK_POLICY_SINGLE);
 }
 
+static void
+nautilus_canvas_view_update_click_to_rename_mode (NautilusCanvasView *canvas_view)
+{
+	NautilusCanvasContainer   *canvas_container;
+	gboolean enabled;
+
+	canvas_container = get_canvas_container (canvas_view);
+	g_assert (canvas_container != NULL);
+
+	enabled = g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_CLICK_TO_RENAME);
+
+	nautilus_canvas_container_set_click_to_rename_enabled (canvas_container,
+														   enabled);
+}
+
 static gboolean
 get_stored_layout_timestamp (NautilusCanvasContainer *container,
 			     NautilusCanvasIconData *icon_data,
@@ -1682,6 +1706,7 @@
 			   GTK_WIDGET (canvas_container));
 
 	nautilus_canvas_view_update_click_mode (canvas_view);
+	nautilus_canvas_view_update_click_to_rename_mode (canvas_view);
 	nautilus_canvas_container_set_zoom_level (canvas_container,
 						  get_default_zoom_level (canvas_view));
 
@@ -1870,6 +1895,7 @@
 	nautilus_view_class->invert_selection = nautilus_canvas_view_invert_selection;
 	nautilus_view_class->compare_files = compare_files;
         nautilus_view_class->click_policy_changed = nautilus_canvas_view_click_policy_changed;
+        nautilus_view_class->click_to_rename_mode_changed = nautilus_canvas_view_click_to_rename_mode_changed;
 	nautilus_view_class->update_actions_state = nautilus_canvas_view_update_actions_state;
         nautilus_view_class->sort_directories_first_changed = nautilus_canvas_view_sort_directories_first_changed;
         nautilus_view_class->start_renaming_file = nautilus_canvas_view_start_renaming_file;
diff '--exclude=.git' -urN a/src/nautilus-file-management-properties.c b/src/nautilus-file-management-properties.c
--- a/src/nautilus-file-management-properties.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-file-management-properties.c	2015-11-18 12:13:35.617960443 -0500
@@ -53,9 +53,13 @@
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_TRASH_CONFIRM_WIDGET "trash_confirm_checkbutton"
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SHOW_HIDDEN_WIDGET "hidden_files_checkbutton"
 
+#define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_QUICK_RENAMES_WITH_PAUSE_IN_BETWEEN "quick_renames_with_pause_in_between"
+
 /* int enums */
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_THUMBNAIL_LIMIT_WIDGET "preview_image_size_combobox"
 
+#define W(s) (gtk_builder_get_object (builder, s))
+
 static const char * const default_view_values[] = {
 	"icon-view",
 	"list-view",
@@ -583,6 +587,29 @@
 				gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (object)));
 }
 
+/* When single click radio button is selected, checkbox for quick renames should get unselected and disable to avoid annoying features */
+static void
+setup_quick_renames (GtkBuilder *builder)
+{
+	gboolean enabled = FALSE;
+	enabled = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (W (click_behavior_components[1])));
+	if(enabled==FALSE){
+		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(W (NAUTILUS_FILE_MANAGEMENT_PROPERTIES_QUICK_RENAMES_WITH_PAUSE_IN_BETWEEN)), FALSE);
+	}
+	gtk_widget_set_sensitive (GTK_WIDGET (W (NAUTILUS_FILE_MANAGEMENT_PROPERTIES_QUICK_RENAMES_WITH_PAUSE_IN_BETWEEN)), enabled);
+}
+
+static void
+connect_quick_renames (GtkBuilder *builder)
+{
+	GtkRadioButton *w;
+	w=GTK_RADIO_BUTTON(W(click_behavior_components[0]));
+ 		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_quick_renames), builder);
+
+	w=GTK_RADIO_BUTTON(W(click_behavior_components[1]));
+		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_quick_renames), builder);
+}
+
 static  void
 nautilus_file_management_properties_dialog_setup (GtkBuilder *builder, GtkWindow *window)
 {
@@ -646,6 +673,9 @@
 			    (const char **) click_behavior_components,
 			    NAUTILUS_PREFERENCES_CLICK_POLICY,
 			    (const char **) click_behavior_values);
+	bind_builder_bool(builder, nautilus_preferences,
+			    NAUTILUS_FILE_MANAGEMENT_PROPERTIES_QUICK_RENAMES_WITH_PAUSE_IN_BETWEEN,
+			    NAUTILUS_PREFERENCES_CLICK_TO_RENAME);
 	bind_builder_radio (builder, nautilus_preferences,
 			    (const char **) executable_text_components,
 			    NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION,
@@ -657,6 +687,10 @@
 				thumbnail_limit_values,
 				G_N_ELEMENTS (thumbnail_limit_values));
 
+	/* to make checkbox for quickrenames get disabled when single click is selected */ 
+	setup_quick_renames(builder);
+	connect_quick_renames(builder);
+
 	nautilus_file_management_properties_dialog_setup_icon_caption_page (builder);
 	nautilus_file_management_properties_dialog_setup_list_column_page (builder);
 
diff '--exclude=.git' -urN a/src/nautilus-file-management-properties.ui b/src/nautilus-file-management-properties.ui
--- a/src/nautilus-file-management-properties.ui	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-file-management-properties.ui	2015-11-18 12:13:35.617960443 -0500
@@ -488,6 +488,22 @@
                                 <property name="position">1</property>
                               </packing>
                             </child>
+                            <child>
+                              <object class="GtkCheckButton" id="quick_renames_with_pause_in_between">
+                                <property name="label" translatable="yes">Click twice with a pause in between to rename items</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">False</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="use_underline">True</property>
+                                <property name="draw_indicator">True</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">2</property>
+                              </packing>
+                            </child>
                           </object>
                         </child>
                       </object>
diff '--exclude=.git' -urN a/src/nautilus-list-view.c b/src/nautilus-list-view.c
--- a/src/nautilus-list-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-list-view.c	2015-11-18 12:13:35.618960428 -0500
@@ -102,6 +102,8 @@
 	gulong clipboard_handler_id;
 
 	GQuark last_sort_attr;
+
+	gboolean click_to_rename;
 };
 
 struct SelectionForeachData {
@@ -137,6 +139,10 @@
 								  GError            *error,
 								  gpointer           callback_data);
 
+static void   nautilus_list_view_start_renaming_file             (NautilusView *view,
+                                                                  NautilusFile *file,
+                                                                  gboolean  select_all);
+
 static void   apply_columns_settings                             (NautilusListView *list_view,
                                                                   char **column_order,
                                                                   char **visible_columns);
@@ -647,6 +653,187 @@
 }
 
 static gboolean
+clicked_on_text_in_name_cell (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	gboolean ret = FALSE;
+
+	NautilusListViewDetails *details = view->details;
+	int x_col_offset, x_cell_offset, width, expander_size, horizontal_separator, expansion_offset;
+
+	x_col_offset = gtk_tree_view_column_get_x_offset (details->file_name_column);
+
+	gtk_tree_view_column_cell_get_position (details->file_name_column,
+											GTK_CELL_RENDERER (details->file_name_cell),
+											&x_cell_offset, &width);
+
+	gtk_widget_style_get (GTK_WIDGET (details->tree_view),
+									  "expander-size", &expander_size,
+									  "horizontal-separator", &horizontal_separator,
+									  NULL);
+
+	expander_size += 4;
+	expansion_offset = ((horizontal_separator / 2) + gtk_tree_path_get_depth (path) * expander_size);
+
+	ret = (event->x > (expansion_offset + x_col_offset + x_cell_offset) &&
+		   event->x < (x_col_offset + x_cell_offset + width)) &&
+		   !gtk_tree_view_is_blank_at_pos (GTK_TREE_VIEW (view->details->tree_view),
+														  event->x, event->y,
+														  NULL, NULL, NULL, NULL);
+
+	return ret;
+}
+
+static gboolean
+clicked_within_double_click_interval (NautilusListView *view)
+{
+	static gint64 last_click_time = 0;
+	static int click_count = 0;
+
+	gint64 current_time;
+	gint interval;
+
+	/* fetch system double-click time */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &interval,
+				  NULL);
+
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < interval * 1000) {
+		click_count++;
+	} else {
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow double click */
+	if (click_count == 1) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+clicked_within_slow_click_interval_on_text (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	static gint64 last_slow_click_time = 0;
+	static gint slow_click_count = 0;
+	gint64 current_time;
+	gint interval;
+	gint double_click_interval;
+
+	/* fetch system double-click time */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_interval,
+				  NULL);
+
+	/* slow click interval is always 2 seconds longer than the system
+	 * double-click interval. */
+
+	interval = double_click_interval + 2000;
+
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_slow_click_time < interval * 1000) {
+		slow_click_count = 1;
+	} else {
+		slow_click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_slow_click_time = current_time;
+
+	GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (view->details->tree_view));
+
+	GList *selected = gtk_tree_selection_get_selected_rows (selection, NULL);
+	gint selected_count = g_list_length (selected);
+	g_list_free (selected);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	/* Only allow second click on text to trigger this */
+	if (slow_click_count == 1 &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0 &&
+		clicked_on_text_in_name_cell (view, path, event)) {
+		slow_click_count = 0;
+
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+handle_icon_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event, gboolean on_expander)
+{
+	GtkWidgetClass *tree_view_class;
+	tree_view_class = GTK_WIDGET_GET_CLASS (view->details->tree_view);
+
+	/* Ignore double click if we are in single click mode */
+	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE) {
+		return FALSE;
+	}
+
+	if (clicked_within_double_click_interval (view) && 
+		view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0 &&
+		!on_expander) {
+		/* NOTE: Activation can actually destroy the view if we're switching */
+		if (!button_event_modifies_selection (event)) {
+			if ((event->button == 1 || event->button == 3)) {
+				activate_selected_items (view);
+			} else if (event->button == 2) {
+				activate_selected_items_alternate (view, NULL, TRUE);
+			}
+
+			return TRUE;
+		} else if (event->button == 1 &&
+			   (event->state & GDK_SHIFT_MASK) != 0) {
+			NautilusFile *file;
+			file = nautilus_list_model_file_for_path (view->details->model, path);
+			if (file != NULL) {
+				activate_selected_items_alternate (view, file, TRUE);
+				nautilus_file_unref (file);
+			}
+
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
+handle_icon_slow_two_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	NautilusListViewDetails *details;
+	NautilusFile *file;
+
+	details = view->details;
+
+	if (!details->click_to_rename)
+		return FALSE;
+
+	file = nautilus_list_model_file_for_path (view->details->model, path);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (clicked_within_slow_click_interval_on_text (view, path, event) && view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		if (!button_event_modifies_selection (event)) {
+			nautilus_list_view_start_renaming_file (NAUTILUS_VIEW (view), file, FALSE);
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
 button_press_callback (GtkWidget *widget, GdkEventButton *event, gpointer callback_data)
 {
 	NautilusListView *view;
@@ -654,10 +841,6 @@
 	GtkTreePath *path;
 	GtkTreeSelection *selection;
 	GtkWidgetClass *tree_view_class;
-	gint64 current_time;
-	static gint64 last_click_time = 0;
-	static int click_count = 0;
-	int double_click_time;
 	gboolean call_parent, on_expander, show_expanders;
 	gboolean is_simple_click, path_selected;
 	NautilusFile *file;
@@ -672,6 +855,10 @@
 		return FALSE;
 	}
 
+	if (event->type == GDK_2BUTTON_PRESS) {
+		return TRUE;
+	}
+
 	if (event->window != gtk_tree_view_get_bin_window (tree_view)) {
 		return FALSE;
 	}
@@ -681,26 +868,6 @@
 		 tree_view,
 		 event->x, event->y);
 
-	g_object_get (G_OBJECT (gtk_widget_get_settings (widget)),
-		      "gtk-double-click-time", &double_click_time,
-		      NULL);
-
-	/* Determine click count */
-	current_time = g_get_monotonic_time ();
-	if (current_time - last_click_time < double_click_time * 1000) {
-		click_count++;
-	} else {
-		click_count = 0;
-	}
-
-	/* Stash time for next compare */
-	last_click_time = current_time;
-
-	/* Ignore double click if we are in single click mode */
-	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE && click_count >= 2) {
-		return TRUE;
-	}
-
 	view->details->ignore_button_release = FALSE;
 	is_simple_click = ((event->button == 1 || event->button == 2) && (event->type == GDK_BUTTON_PRESS));
 
@@ -753,30 +920,10 @@
 		view->details->double_click_path[0] = gtk_tree_path_copy (path);
 	}
 
-	if (event->type == GDK_2BUTTON_PRESS) {
+	if (handle_icon_double_click (view, path, event, on_expander) ||
+		handle_icon_slow_two_click (view, path, event)) {
 		/* Double clicking does not trigger a D&D action. */
 		view->details->drag_button = 0;
-
-		/* NOTE: Activation can actually destroy the view if we're switching */
-		if (!on_expander &&
-		    view->details->double_click_path[1] &&
-		    gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
-			if ((event->button == 1) && button_event_modifies_selection (event)) {
-				file = nautilus_list_model_file_for_path (view->details->model, path);
-				if (file != NULL) {
-					activate_selected_items_alternate (view, file, TRUE);
-					nautilus_file_unref (file);
-				}
-			} else {
-				if ((event->button == 1 || event->button == 3)) {
-					activate_selected_items (view);
-				} else if (event->button == 2) {
-					activate_selected_items_alternate (view, NULL, TRUE);
-				}
-			}
-		} else {
-			tree_view_class->button_press_event (widget, event);
-		}
 	} else {
 		/* We're going to filter out some situations where
 		 * we can't let the default code run because all
@@ -1262,7 +1409,7 @@
 {
 	NautilusListView *view = user_data;
 
-	view->details->editable_widget = NULL;
+	g_clear_object (&view->details->editable_widget);
 
 	nautilus_view_set_is_renaming (NAUTILUS_VIEW (view), FALSE);
 	nautilus_view_unfreeze_updates (NAUTILUS_VIEW (view));
@@ -3210,6 +3357,19 @@
 }
 
 static void
+nautilus_list_view_click_to_rename_mode_changed (NautilusView *directory_view)
+{
+	NautilusListView *view;
+
+	g_assert (NAUTILUS_IS_LIST_VIEW (directory_view));
+
+	view = NAUTILUS_LIST_VIEW (directory_view);
+
+	view->details->click_to_rename = g_settings_get_boolean (nautilus_preferences,
+															 NAUTILUS_PREFERENCES_CLICK_TO_RENAME);
+}
+
+static void
 nautilus_list_view_click_policy_changed (NautilusView *directory_view)
 {
 	GdkWindow *win;
@@ -3537,6 +3697,7 @@
 	nautilus_view_class->get_view_id = nautilus_list_view_get_id;
 	nautilus_view_class->get_first_visible_file = nautilus_list_view_get_first_visible_file;
 	nautilus_view_class->scroll_to_file = list_view_scroll_to_file;
+	nautilus_view_class->click_to_rename_mode_changed = nautilus_list_view_click_to_rename_mode_changed;
 }
 
 static void
@@ -3568,6 +3729,7 @@
 				  list_view);
 
 	nautilus_list_view_click_policy_changed (NAUTILUS_VIEW (list_view));
+	nautilus_list_view_click_to_rename_mode_changed (NAUTILUS_VIEW (list_view));
 
 	nautilus_list_view_sort_directories_first_changed (NAUTILUS_VIEW (list_view));
 	nautilus_list_view_set_zoom_level (list_view, get_default_zoom_level ());
diff '--exclude=.git' -urN a/src/nautilus-view.c b/src/nautilus-view.c
--- a/src/nautilus-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-view.c	2015-11-18 12:19:10.353086016 -0500
@@ -1976,6 +1976,16 @@
 	NAUTILUS_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->click_policy_changed (view);
 }
 
+static void
+click_to_rename_changed_callback (gpointer callback_data)
+{
+	NautilusView *view;
+
+	view = NAUTILUS_VIEW (callback_data);
+
+	NAUTILUS_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->click_to_rename_mode_changed (view);
+}
+
 gboolean
 nautilus_view_should_sort_directories_first (NautilusView *view)
 {
@@ -2371,6 +2381,8 @@
 	g_signal_handlers_disconnect_by_func (nautilus_preferences,
 					      click_policy_changed_callback, view);
 	g_signal_handlers_disconnect_by_func (nautilus_preferences,
+						  click_to_rename_changed_callback, view);
+	g_signal_handlers_disconnect_by_func (nautilus_preferences,
 					      sort_directories_first_changed_callback, view);
 	g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
 					      show_hidden_files_changed_callback, view);
@@ -7520,6 +7532,10 @@
 				  G_CALLBACK (click_policy_changed_callback),
 				  view);
 	g_signal_connect_swapped (nautilus_preferences,
+				  "changed::" NAUTILUS_PREFERENCES_CLICK_TO_RENAME,
+				  G_CALLBACK(click_to_rename_changed_callback),
+				  view);
+	g_signal_connect_swapped (nautilus_preferences,
 				  "changed::" NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST,
 				  G_CALLBACK (sort_directories_first_changed_callback), view);
 	g_signal_connect_swapped (gtk_filechooser_preferences,
diff '--exclude=.git' -urN a/src/nautilus-view.h b/src/nautilus-view.h
--- a/src/nautilus-view.h	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-view.h	2015-11-18 12:13:35.619960414 -0500
@@ -269,6 +269,7 @@
 	 * values and forcing an update if appropriate.
 	 */
 	void	(* click_policy_changed)	   (NautilusView *view);
+	void	(* click_to_rename_mode_changed) (NautilusView *view);
 	void	(* sort_directories_first_changed) (NautilusView *view);
 
 	/* Get the id string for this view. Its a constant string, not memory managed */
