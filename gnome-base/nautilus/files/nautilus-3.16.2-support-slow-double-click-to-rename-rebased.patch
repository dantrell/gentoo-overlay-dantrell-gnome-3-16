diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-container.c b/libnautilus-private/nautilus-canvas-container.c
--- a/libnautilus-private/nautilus-canvas-container.c	2015-05-13 13:24:43.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-container.c	2016-06-02 23:55:02.784926715 -0400
@@ -186,6 +186,11 @@
 
 static void store_layout_timestamps_now (NautilusCanvasContainer *container);
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event);
+
 static const char *nautilus_canvas_container_accessible_action_names[] = {
 	"activate",
 	"menu",
@@ -4068,7 +4073,7 @@
 	static gint click_count = 0;
 	gint double_click_time;
 	gint64 current_time;
-		
+
 	details = container->details;
 
 	if (details->icon_selected_on_button_down &&
@@ -4132,6 +4137,19 @@
 			}
 		}
 	}
+
+	if (details->drag_icon != NULL &&
+		handle_canvas_slow_double_click (container, details->drag_icon, event)) {
+		if (!details->skip_rename_on_release &&
+			(details->just_renamed == NULL || details->just_renamed != details->drag_icon))
+			nautilus_canvas_container_start_renaming_selected_item (container, FALSE);
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		} else {
+			details->just_renamed = details->drag_icon;
+		}
+	}
 }
 
 static gboolean
@@ -4165,6 +4183,44 @@
 	}
 }
 
+static gboolean
+clicked_within_slow_double_click_interval (NautilusCanvasContainer *container, NautilusCanvasIcon *icon, GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	details = container->details;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		}
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow slow double click */
+	if (click_count == 1 && icon == get_first_selected_icon (container)) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
 static void
 clear_drag_state (NautilusCanvasContainer *container)
 {
@@ -5266,6 +5322,9 @@
 
 	container->details = details;
 
+	details->skip_rename_on_release = FALSE;
+	details->just_renamed = NULL;
+
 	g_signal_connect (container, "focus-in-event",
 			  G_CALLBACK (handle_focus_in_event), NULL);
 	g_signal_connect (container, "focus-out-event",
@@ -5317,6 +5376,46 @@
 	return FALSE;
 }
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+
+	NautilusFile *file = NAUTILUS_FILE (icon->data);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (event->button != DRAG_BUTTON) {
+		return FALSE;
+	}
+
+	details = container->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	GList *selection = nautilus_canvas_container_get_selection (container);
+	gint selected_count = g_list_length (selection);
+	g_list_free (selection);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	if (!details->single_click_mode &&
+		clicked_within_slow_double_click_interval (container, icon, event) &&
+		details->double_click_icon[0] == details->double_click_icon[1] &&
+		details->double_click_button[0] == details->double_click_button[1]) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 /* NautilusCanvasIcon event handling.  */
 
 /* Conceptually, pressing button 1 together with CTRL or SHIFT toggles
@@ -5337,6 +5436,8 @@
 
 	details = container->details;
 
+	details->skip_rename_on_release = FALSE;
+
 	if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_3BUTTON_PRESS) {
 		return TRUE;
 	}
@@ -5387,7 +5488,11 @@
 	 * the same way for contextual menu as it would be without. 
 	 */
 	details->icon_selected_on_button_down = icon->is_selected;
-	
+
+	GList *icons = nautilus_canvas_container_get_selected_icons (container);
+	details->skip_rename_on_release = g_list_length (icons) > 1;
+	g_list_free (icons);
+
 	if ((event->button == DRAG_BUTTON || event->button == MIDDLE_BUTTON) &&
 	    (event->state & GDK_SHIFT_MASK) != 0) {
 		NautilusCanvasIcon *start_icon;
@@ -7408,6 +7513,15 @@
 	container->details->single_click_mode = single_click_mode;
 }
 
+void
+nautilus_canvas_container_set_slow_double_click_mode (NautilusCanvasContainer *container,
+													   gboolean slow_double_click_mode)
+{
+	g_return_if_fail (NAUTILUS_IS_CANVAS_CONTAINER (container));
+
+	container->details->slow_double_click_mode = slow_double_click_mode;
+}
+
 /* Return if the canvas container is a fixed size */
 gboolean
 nautilus_canvas_container_get_is_fixed_size (NautilusCanvasContainer *container)
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-container.h b/libnautilus-private/nautilus-canvas-container.h
--- a/libnautilus-private/nautilus-canvas-container.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-container.h	2016-06-02 23:55:02.784926715 -0400
@@ -297,6 +297,8 @@
 									   int                     new_zoom_level);
 void              nautilus_canvas_container_set_single_click_mode         (NautilusCanvasContainer  *container,
 									   gboolean                single_click_mode);
+void              nautilus_canvas_container_set_slow_double_click_mode   (NautilusCanvasContainer  *container,
+									   gboolean                slow_double_click_mode);
 void              nautilus_canvas_container_enable_linger_selection       (NautilusCanvasContainer  *view,
 									   gboolean                enable);
 gboolean          nautilus_canvas_container_get_is_fixed_size             (NautilusCanvasContainer  *container);
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-canvas-private.h b/libnautilus-private/nautilus-canvas-private.h
--- a/libnautilus-private/nautilus-canvas-private.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-canvas-private.h	2016-06-02 23:55:02.785926698 -0400
@@ -174,6 +174,9 @@
 	NautilusCanvasIcon *double_click_icon[2]; /* Both clicks in a double click need to be on the same icon */
 	guint double_click_button[2];
 
+	gboolean skip_rename_on_release;
+	NautilusCanvasIcon *just_renamed;
+
 	NautilusCanvasIcon *range_selection_base_icon;
 	
 	/* Renaming Details */
@@ -208,6 +211,7 @@
 	/* Mode settings. */
 	gboolean single_click_mode;
 	gboolean auto_layout;
+	gboolean slow_double_click_mode;
 
 	/* Label position */
 	NautilusCanvasLabelPosition label_position;
diff '--exclude=.git' -urN a/libnautilus-private/nautilus-global-preferences.h b/libnautilus-private/nautilus-global-preferences.h
--- a/libnautilus-private/nautilus-global-preferences.h	2015-05-13 08:12:56.000000000 -0400
+++ b/libnautilus-private/nautilus-global-preferences.h	2016-06-02 23:55:02.785926698 -0400
@@ -50,6 +50,9 @@
 /* Single/Double click preference  */
 #define NAUTILUS_PREFERENCES_CLICK_POLICY			"click-policy"
 
+/* Slow double click preference */
+#define NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY "slow-double-click-policy"
+
 /* Activating executable text files */
 #define NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION		"executable-text-activation"
 
diff '--exclude=.git' -urN a/libnautilus-private/org.gnome.nautilus.gschema.xml.in b/libnautilus-private/org.gnome.nautilus.gschema.xml.in
--- a/libnautilus-private/org.gnome.nautilus.gschema.xml.in	2015-05-13 13:24:43.000000000 -0400
+++ b/libnautilus-private/org.gnome.nautilus.gschema.xml.in	2016-06-02 23:55:02.785926698 -0400
@@ -86,6 +86,11 @@
       <_summary>Type of click used to launch/open files</_summary>
       <_description>Possible values are "single" to launch files on a single click,  or "double" to launch them on a double click.</_description>
     </key>
+    <key name="slow-double-click-policy" type="b">
+      <default>false</default>
+      <_summary>Type of click used to rename files</_summary>
+      <_description>If set to true, then Nautilus will have a feature allowing you to rename files on a slow double click.</_description>
+    </key>
     <key name="executable-text-activation" enum="org.gnome.nautilus.ActivationChoice">
       <default>'display'</default>
       <_summary>What to do with executable text files when activated</_summary>
diff '--exclude=.git' -urN a/src/nautilus-canvas-view.c b/src/nautilus-canvas-view.c
--- a/src/nautilus-canvas-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-canvas-view.c	2016-06-02 23:56:05.568863122 -0400
@@ -155,6 +155,7 @@
 									     NautilusFile         *file,
 									     const char           *sort_by);
 static void                 nautilus_canvas_view_update_click_mode            (NautilusCanvasView           *canvas_view);
+static void                 nautilus_canvas_view_update_slow_double_click_mode  (NautilusCanvasView           *canvas_view);
 static gboolean             nautilus_canvas_view_supports_scaling	      (NautilusCanvasView           *canvas_view);
 static void                 nautilus_canvas_view_reveal_selection       (NautilusView               *view);
 static const SortCriterion *get_sort_criterion_by_sort_type           (NautilusFileSortType  sort_type);
@@ -1440,6 +1441,14 @@
 }
 
 static void
+nautilus_canvas_view_slow_double_click_policy_changed (NautilusView *directory_view)
+{
+	g_assert (NAUTILUS_IS_CANVAS_VIEW (directory_view));
+
+	nautilus_canvas_view_update_slow_double_click_mode (NAUTILUS_CANVAS_VIEW (directory_view));
+}
+
+static void
 image_display_policy_changed_callback (gpointer callback_data)
 {
 	NautilusCanvasView *canvas_view;
@@ -1561,6 +1570,21 @@
 						       click_mode == NAUTILUS_CLICK_POLICY_SINGLE);
 }
 
+static void
+nautilus_canvas_view_update_slow_double_click_mode (NautilusCanvasView *canvas_view)
+{
+	NautilusCanvasContainer   *canvas_container;
+	gboolean slow_double_click_mode;
+
+	canvas_container = get_canvas_container (canvas_view);
+	g_assert (canvas_container != NULL);
+
+	slow_double_click_mode = g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+
+	nautilus_canvas_container_set_slow_double_click_mode (canvas_container,
+														  slow_double_click_mode);
+}
+
 static gboolean
 get_stored_layout_timestamp (NautilusCanvasContainer *container,
 			     NautilusCanvasIconData *icon_data,
@@ -1682,6 +1706,7 @@
 			   GTK_WIDGET (canvas_container));
 
 	nautilus_canvas_view_update_click_mode (canvas_view);
+	nautilus_canvas_view_update_slow_double_click_mode (canvas_view);
 	nautilus_canvas_container_set_zoom_level (canvas_container,
 						  get_default_zoom_level (canvas_view));
 
@@ -1870,6 +1895,7 @@
 	nautilus_view_class->invert_selection = nautilus_canvas_view_invert_selection;
 	nautilus_view_class->compare_files = compare_files;
         nautilus_view_class->click_policy_changed = nautilus_canvas_view_click_policy_changed;
+        nautilus_view_class->slow_double_click_policy_changed = nautilus_canvas_view_slow_double_click_policy_changed;
 	nautilus_view_class->update_actions_state = nautilus_canvas_view_update_actions_state;
         nautilus_view_class->sort_directories_first_changed = nautilus_canvas_view_sort_directories_first_changed;
         nautilus_view_class->start_renaming_file = nautilus_canvas_view_start_renaming_file;
diff '--exclude=.git' -urN a/src/nautilus-file-management-properties.c b/src/nautilus-file-management-properties.c
--- a/src/nautilus-file-management-properties.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-file-management-properties.c	2016-06-02 23:55:02.786926681 -0400
@@ -53,9 +53,13 @@
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_TRASH_CONFIRM_WIDGET "trash_confirm_checkbutton"
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SHOW_HIDDEN_WIDGET "hidden_files_checkbutton"
 
+#define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SLOW_DOUBLE_CLICK_WIDGET "slow_double_click_checkbutton"
+
 /* int enums */
 #define NAUTILUS_FILE_MANAGEMENT_PROPERTIES_THUMBNAIL_LIMIT_WIDGET "preview_image_size_combobox"
 
+#define W(s) (gtk_builder_get_object (builder, s))
+
 static const char * const sort_order_values[] = {
 	"name",
 	"size",
@@ -583,6 +587,29 @@
 				gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (object)));
 }
 
+/* disable slow-double-click-policy when click-policy is "single" */
+static void
+setup_slow_double_click_policy (GtkBuilder *builder)
+{
+	gboolean enabled = FALSE;
+	enabled = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (W (click_behavior_components[1])));
+	if(enabled==FALSE){
+		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(W (NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SLOW_DOUBLE_CLICK_WIDGET)), FALSE);
+	}
+	gtk_widget_set_sensitive (GTK_WIDGET (W (NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SLOW_DOUBLE_CLICK_WIDGET)), enabled);
+}
+
+static void
+connect_slow_double_click_policy (GtkBuilder *builder)
+{
+	GtkRadioButton *w;
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[0]));
+ 		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[1]));
+		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+}
+
 static  void
 nautilus_file_management_properties_dialog_setup (GtkBuilder *builder, GtkWindow *window)
 {
@@ -646,6 +673,9 @@
 			    (const char **) click_behavior_components,
 			    NAUTILUS_PREFERENCES_CLICK_POLICY,
 			    (const char **) click_behavior_values);
+	bind_builder_bool(builder, nautilus_preferences,
+			    NAUTILUS_FILE_MANAGEMENT_PROPERTIES_SLOW_DOUBLE_CLICK_WIDGET,
+			    NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
 	bind_builder_radio (builder, nautilus_preferences,
 			    (const char **) executable_text_components,
 			    NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION,
@@ -657,6 +687,10 @@
 				thumbnail_limit_values,
 				G_N_ELEMENTS (thumbnail_limit_values));
 
+	/* disable slow-double-click-policy when click-policy is "single" */
+	setup_slow_double_click_policy (builder);
+	connect_slow_double_click_policy (builder);
+
 	nautilus_file_management_properties_dialog_setup_icon_caption_page (builder);
 	nautilus_file_management_properties_dialog_setup_list_column_page (builder);
 
diff '--exclude=.git' -urN a/src/nautilus-file-management-properties.ui b/src/nautilus-file-management-properties.ui
--- a/src/nautilus-file-management-properties.ui	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-file-management-properties.ui	2016-06-02 23:55:02.786926681 -0400
@@ -488,6 +488,22 @@
                                 <property name="position">1</property>
                               </packing>
                             </child>
+                            <child>
+                              <object class="GtkCheckButton" id="slow_double_click_checkbutton">
+                                <property name="label" translatable="yes">Slowly double click to rename items</property>
+                                <property name="visible">True</property>
+                                <property name="can_focus">True</property>
+                                <property name="receives_default">False</property>
+                                <property name="use_action_appearance">False</property>
+                                <property name="use_underline">True</property>
+                                <property name="draw_indicator">True</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">2</property>
+                              </packing>
+                            </child>
                           </object>
                         </child>
                       </object>
diff '--exclude=.git' -urN a/src/nautilus-list-view.c b/src/nautilus-list-view.c
--- a/src/nautilus-list-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-list-view.c	2016-06-02 23:55:02.787926664 -0400
@@ -77,6 +77,9 @@
 
 	GtkTreePath *double_click_path[2]; /* Both clicks in a double click need to be on the same row */
 
+	gboolean skip_rename_on_release;
+	NautilusFile *just_renamed;
+
 	GtkTreePath *new_selection_path;   /* Path of the new selection after removing a file */
 
 	GtkTreePath *hover_path;
@@ -102,6 +105,8 @@
 	gulong clipboard_handler_id;
 
 	GQuark last_sort_attr;
+
+	gboolean slow_double_click_mode;
 };
 
 struct SelectionForeachData {
@@ -137,6 +142,10 @@
 								  GError            *error,
 								  gpointer           callback_data);
 
+static void   nautilus_list_view_start_renaming_file             (NautilusView *view,
+                                                                  NautilusFile *file,
+                                                                  gboolean  select_all);
+
 static void   apply_columns_settings                             (NautilusListView *list_view,
                                                                   char **column_order,
                                                                   char **visible_columns);
@@ -145,6 +154,8 @@
 static char **get_column_order                                   (NautilusListView *list_view);
 static char **get_default_column_order                           (NautilusListView *list_view);
 
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event);
 
 G_DEFINE_TYPE (NautilusListView, nautilus_list_view, NAUTILUS_TYPE_VIEW);
 
@@ -355,6 +366,23 @@
 				activate_selected_items_alternate (view, NULL, TRUE);
 			}
 		}
+
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		if (handle_icon_slow_double_click (view, path, event)) {
+			if (!view->details->skip_rename_on_release &&
+				(view->details->just_renamed == NULL || view->details->just_renamed != file))
+				nautilus_list_view_start_renaming_file (NAUTILUS_VIEW (view), file, FALSE);
+			/* Allow normal double click if just renamed */
+			if (view->details->just_renamed == file) {
+				view->details->just_renamed = NULL;
+			} else {
+				view->details->just_renamed = file;
+			}
+		}
+
+		nautilus_file_unref (file);
+
 		gtk_tree_path_free (path);
 	}
 	
@@ -647,6 +675,153 @@
 }
 
 static gboolean
+clicked_within_double_click_interval (NautilusListView *view)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < double_click_time * 1000) {
+		click_count++;
+	} else {
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow double click */
+	if (click_count == 1) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+clicked_within_slow_double_click_interval (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		/* Allow normal double click if just renamed */
+		if (view->details->just_renamed == file) {
+			view->details->just_renamed = NULL;
+		}
+
+		nautilus_file_unref (file);
+
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (view->details->tree_view));
+
+	GList *selected = gtk_tree_selection_get_selected_rows (selection, NULL);
+	gint selected_count = g_list_length (selected);
+	g_list_free (selected);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	/* Only allow slow double click */
+	if (click_count == 1 &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+handle_icon_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event, gboolean on_expander)
+{
+	GtkWidgetClass *tree_view_class;
+	tree_view_class = GTK_WIDGET_GET_CLASS (view->details->tree_view);
+
+	/* Ignore double click if we are in single click mode */
+	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE) {
+		return FALSE;
+	}
+
+	if (clicked_within_double_click_interval (view) && 
+		view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0 &&
+		!on_expander) {
+		/* NOTE: Activation can actually destroy the view if we're switching */
+		if (!button_event_modifies_selection (event)) {
+			if ((event->button == 1 || event->button == 3)) {
+				activate_selected_items (view);
+			} else if (event->button == 2) {
+				activate_selected_items_alternate (view, NULL, TRUE);
+			}
+
+			return TRUE;
+		} else if (event->button == 1 &&
+			   (event->state & GDK_SHIFT_MASK) != 0) {
+			NautilusFile *file;
+			file = nautilus_list_model_file_for_path (view->details->model, path);
+			if (file != NULL) {
+				activate_selected_items_alternate (view, file, TRUE);
+				nautilus_file_unref (file);
+			}
+
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	NautilusListViewDetails *details;
+	NautilusFile *file;
+
+	details = view->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	file = nautilus_list_model_file_for_path (view->details->model, path);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (clicked_within_slow_double_click_interval (view, path, event) && view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
 button_press_callback (GtkWidget *widget, GdkEventButton *event, gpointer callback_data)
 {
 	NautilusListView *view;
@@ -654,10 +829,6 @@
 	GtkTreePath *path;
 	GtkTreeSelection *selection;
 	GtkWidgetClass *tree_view_class;
-	gint64 current_time;
-	static gint64 last_click_time = 0;
-	static int click_count = 0;
-	int double_click_time;
 	gboolean call_parent, on_expander, show_expanders;
 	gboolean is_simple_click, path_selected;
 	NautilusFile *file;
@@ -667,11 +838,17 @@
 	tree_view_class = GTK_WIDGET_GET_CLASS (tree_view);
 	selection = gtk_tree_view_get_selection (tree_view);
 
+	view->details->skip_rename_on_release = FALSE;
+
 	/* Don't handle extra mouse buttons here */
 	if (event->button > 5) {
 		return FALSE;
 	}
 
+	if (event->type == GDK_2BUTTON_PRESS) {
+		return TRUE;
+	}
+
 	if (event->window != gtk_tree_view_get_bin_window (tree_view)) {
 		return FALSE;
 	}
@@ -681,26 +858,6 @@
 		 tree_view,
 		 event->x, event->y);
 
-	g_object_get (G_OBJECT (gtk_widget_get_settings (widget)),
-		      "gtk-double-click-time", &double_click_time,
-		      NULL);
-
-	/* Determine click count */
-	current_time = g_get_monotonic_time ();
-	if (current_time - last_click_time < double_click_time * 1000) {
-		click_count++;
-	} else {
-		click_count = 0;
-	}
-
-	/* Stash time for next compare */
-	last_click_time = current_time;
-
-	/* Ignore double click if we are in single click mode */
-	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE && click_count >= 2) {
-		return TRUE;
-	}
-
 	view->details->ignore_button_release = FALSE;
 	is_simple_click = ((event->button == 1 || event->button == 2) && (event->type == GDK_BUTTON_PRESS));
 
@@ -753,31 +910,14 @@
 		view->details->double_click_path[0] = gtk_tree_path_copy (path);
 	}
 
-	if (event->type == GDK_2BUTTON_PRESS) {
+	if (handle_icon_double_click (view, path, event, on_expander)) {
 		/* Double clicking does not trigger a D&D action. */
 		view->details->drag_button = 0;
-
-		/* NOTE: Activation can actually destroy the view if we're switching */
-		if (!on_expander &&
-		    view->details->double_click_path[1] &&
-		    gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
-			if ((event->button == 1) && button_event_modifies_selection (event)) {
-				file = nautilus_list_model_file_for_path (view->details->model, path);
-				if (file != NULL) {
-					activate_selected_items_alternate (view, file, TRUE);
-					nautilus_file_unref (file);
-				}
-			} else {
-				if ((event->button == 1 || event->button == 3)) {
-					activate_selected_items (view);
-				} else if (event->button == 2) {
-					activate_selected_items_alternate (view, NULL, TRUE);
-				}
-			}
-		} else {
-			tree_view_class->button_press_event (widget, event);
-		}
 	} else {
+		GList *selected_rows = gtk_tree_selection_get_selected_rows (tree_view, NULL);
+		view->details->skip_rename_on_release = g_list_length (selected_rows) > 1;
+		g_list_free (selected_rows);
+
 		/* We're going to filter out some situations where
 		 * we can't let the default code run because all
 		 * but one row would be would be deselected. We don't
@@ -1262,7 +1402,7 @@
 {
 	NautilusListView *view = user_data;
 
-	view->details->editable_widget = NULL;
+	g_clear_object (&view->details->editable_widget);
 
 	nautilus_view_set_is_renaming (NAUTILUS_VIEW (view), FALSE);
 	nautilus_view_unfreeze_updates (NAUTILUS_VIEW (view));
@@ -3210,6 +3350,19 @@
 }
 
 static void
+nautilus_list_view_slow_double_click_policy_changed (NautilusView *directory_view)
+{
+	NautilusListView *view;
+
+	g_assert (NAUTILUS_IS_LIST_VIEW (directory_view));
+
+	view = NAUTILUS_LIST_VIEW (directory_view);
+
+	view->details->slow_double_click_mode = g_settings_get_boolean (nautilus_preferences,
+															 NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+}
+
+static void
 nautilus_list_view_click_policy_changed (NautilusView *directory_view)
 {
 	GdkWindow *win;
@@ -3537,6 +3690,7 @@
 	nautilus_view_class->get_view_id = nautilus_list_view_get_id;
 	nautilus_view_class->get_first_visible_file = nautilus_list_view_get_first_visible_file;
 	nautilus_view_class->scroll_to_file = list_view_scroll_to_file;
+	nautilus_view_class->slow_double_click_policy_changed = nautilus_list_view_slow_double_click_policy_changed;
 }
 
 static void
@@ -3545,6 +3699,9 @@
 	GActionGroup *view_action_group;
 	list_view->details = g_new0 (NautilusListViewDetails, 1);
 
+	list_view->details->skip_rename_on_release = FALSE;
+	list_view->details->just_renamed = NULL;
+
 	/* ensure that the zoom level is always set before settings up the tree view columns */
 	list_view->details->zoom_level = get_default_zoom_level ();
 
@@ -3568,6 +3725,7 @@
 				  list_view);
 
 	nautilus_list_view_click_policy_changed (NAUTILUS_VIEW (list_view));
+	nautilus_list_view_slow_double_click_policy_changed (NAUTILUS_VIEW (list_view));
 
 	nautilus_list_view_sort_directories_first_changed (NAUTILUS_VIEW (list_view));
 	nautilus_list_view_set_zoom_level (list_view, get_default_zoom_level ());
diff '--exclude=.git' -urN a/src/nautilus-view.c b/src/nautilus-view.c
--- a/src/nautilus-view.c	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-view.c	2016-06-03 00:00:09.950725631 -0400
@@ -1976,6 +1976,16 @@
 	NAUTILUS_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->click_policy_changed (view);
 }
 
+static void
+slow_double_click_mode_changed_callback (gpointer callback_data)
+{
+	NautilusView *view;
+
+	view = NAUTILUS_VIEW (callback_data);
+
+	NAUTILUS_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->slow_double_click_policy_changed (view);
+}
+
 gboolean
 nautilus_view_should_sort_directories_first (NautilusView *view)
 {
@@ -2371,6 +2381,8 @@
 	g_signal_handlers_disconnect_by_func (nautilus_preferences,
 					      click_policy_changed_callback, view);
 	g_signal_handlers_disconnect_by_func (nautilus_preferences,
+						  slow_double_click_mode_changed_callback, view);
+	g_signal_handlers_disconnect_by_func (nautilus_preferences,
 					      sort_directories_first_changed_callback, view);
 	g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
 					      show_hidden_files_changed_callback, view);
@@ -7520,6 +7532,10 @@
 				  G_CALLBACK (click_policy_changed_callback),
 				  view);
 	g_signal_connect_swapped (nautilus_preferences,
+				  "changed::" NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY,
+				  G_CALLBACK(slow_double_click_mode_changed_callback),
+				  view);
+	g_signal_connect_swapped (nautilus_preferences,
 				  "changed::" NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST,
 				  G_CALLBACK (sort_directories_first_changed_callback), view);
 	g_signal_connect_swapped (gtk_filechooser_preferences,
diff '--exclude=.git' -urN a/src/nautilus-view.h b/src/nautilus-view.h
--- a/src/nautilus-view.h	2015-05-13 13:24:43.000000000 -0400
+++ b/src/nautilus-view.h	2016-06-02 23:55:02.789926631 -0400
@@ -269,6 +269,7 @@
 	 * values and forcing an update if appropriate.
 	 */
 	void	(* click_policy_changed)	   (NautilusView *view);
+	void	(* slow_double_click_policy_changed) (NautilusView *view);
 	void	(* sort_directories_first_changed) (NautilusView *view);
 
 	/* Get the id string for this view. Its a constant string, not memory managed */
