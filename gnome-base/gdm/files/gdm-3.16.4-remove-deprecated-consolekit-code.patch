diff '--exclude=.git' -urN a/common/gdm-common.c b/common/gdm-common.c
--- a/common/gdm-common.c	2015-09-18 15:33:26.000000000 -0400
+++ b/common/gdm-common.c	2017-12-06 18:08:04.283803877 -0500
@@ -39,25 +39,12 @@
 #include "mkdtemp.h"
 #endif
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-login.h>
-#endif
 
 #define GDM_DBUS_NAME                            "org.gnome.DisplayManager"
 #define GDM_DBUS_LOCAL_DISPLAY_FACTORY_PATH      "/org/gnome/DisplayManager/LocalDisplayFactory"
 #define GDM_DBUS_LOCAL_DISPLAY_FACTORY_INTERFACE "org.gnome.DisplayManager.LocalDisplayFactory"
 
-#ifdef WITH_CONSOLE_KIT
-#define CK_NAME      "org.freedesktop.ConsoleKit"
-#define CK_PATH      "/org/freedesktop/ConsoleKit"
-#define CK_INTERFACE "org.freedesktop.ConsoleKit"
-
-#define CK_MANAGER_PATH      "/org/freedesktop/ConsoleKit/Manager"
-#define CK_MANAGER_INTERFACE "org.freedesktop.ConsoleKit.Manager"
-#define CK_SEAT_INTERFACE    "org.freedesktop.ConsoleKit.Seat"
-#define CK_SESSION_INTERFACE "org.freedesktop.ConsoleKit.Session"
-#endif
-
 G_DEFINE_QUARK (gdm-common-error, gdm_common_error);
 
 const char *
@@ -356,301 +343,10 @@
         return TRUE;
 }
 
-#ifdef WITH_CONSOLE_KIT
-
-static gboolean
-get_current_session_id (GDBusConnection  *connection,
-                        char            **session_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             CK_MANAGER_PATH,
-                                             CK_MANAGER_INTERFACE,
-                                             "GetCurrentSession",
-                                             NULL, /* parameters */
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine session: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(o)", session_id);
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
 static gboolean
-get_seat_id_for_session (GDBusConnection  *connection,
-                         const char       *session_id,
-                         char            **seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             session_id,
-                                             CK_SESSION_INTERFACE,
-                                             "GetSeatId",
-                                             NULL, /* parameters */
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine seat: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(o)", seat_id);
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
-static char *
-get_current_seat_id (GDBusConnection *connection)
-{
-        gboolean res;
-        char    *session_id;
-        char    *seat_id;
-
-        session_id = NULL;
-        seat_id = NULL;
-
-        res = get_current_session_id (connection, &session_id);
-        if (res) {
-                res = get_seat_id_for_session (connection, session_id, &seat_id);
-        }
-        g_free (session_id);
-
-        return seat_id;
-}
-
-static gboolean
-activate_session_id_for_ck (GDBusConnection *connection,
-                            const char      *seat_id,
-                            const char      *session_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "ActivateSession",
-                                             g_variant_new ("(o)", session_id),
-                                             NULL,
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to activate session: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
-static gboolean
-session_is_login_window (GDBusConnection *connection,
-                         const char      *session_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        const char *value;
-        gboolean ret;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             session_id,
-                                             CK_SESSION_INTERFACE,
-                                             "GetSessionType",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(s)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine session type: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(&s)", &value);
-
-        if (value == NULL || value[0] == '\0' || strcmp (value, "LoginWindow") != 0) {
-                ret = FALSE;
-        } else {
-                ret = TRUE;
-        }
-
-        g_variant_unref (reply);
-
-        return ret;
-}
-
-static gboolean
-seat_can_activate_sessions (GDBusConnection *connection,
-                            const char      *seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        gboolean ret;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "CanActivateSessions",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(b)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine if can activate sessions: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(b)", &ret);
-        g_variant_unref (reply);
-
-        return ret;
-}
-
-static const char **
-seat_get_sessions (GDBusConnection *connection,
-                   const char      *seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        const char **value;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "GetSessions",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(ao)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to list sessions: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(^ao)", &value);
-        g_variant_unref (reply);
-
-        return value;
-}
-
-static gboolean
-get_login_window_session_id_for_ck (GDBusConnection  *connection,
-                                    const char       *seat_id,
-                                    char            **session_id)
-{
-        gboolean     can_activate_sessions;
-        const char **sessions;
-        int          i;
-
-        *session_id = NULL;
-        sessions = NULL;
-
-        g_debug ("checking if seat can activate sessions");
-
-        can_activate_sessions = seat_can_activate_sessions (connection, seat_id);
-        if (! can_activate_sessions) {
-                g_debug ("seat is unable to activate sessions");
-                return FALSE;
-        }
-
-        sessions = seat_get_sessions (connection, seat_id);
-        for (i = 0; sessions [i] != NULL; i++) {
-                const char *ssid;
-
-                ssid = sessions [i];
-
-                if (session_is_login_window (connection, ssid)) {
-                        *session_id = g_strdup (ssid);
-                        break;
-                }
-        }
-        g_free (sessions);
-
-        return TRUE;
-}
-
-static gboolean
-goto_login_session_for_ck (GDBusConnection  *connection,
-                           GError          **error)
-{
-        gboolean        ret;
-        gboolean        res;
-        char           *session_id;
-        char           *seat_id;
-
-        ret = FALSE;
-
-        /* First look for any existing LoginWindow sessions on the seat.
-           If none are found, create a new one. */
-
-        seat_id = get_current_seat_id (connection);
-        if (seat_id == NULL || seat_id[0] == '\0') {
-                g_debug ("seat id is not set; can't switch sessions");
-                g_set_error (error, GDM_COMMON_ERROR, 0, _("Could not identify the current session."));
-
-                return FALSE;
-        }
-
-        res = get_login_window_session_id_for_ck (connection, seat_id, &session_id);
-        if (! res) {
-                g_set_error (error, GDM_COMMON_ERROR, 1, _("User unable to switch sessions."));
-                return FALSE;
-        }
-
-        if (session_id != NULL) {
-                res = activate_session_id_for_ck (connection, seat_id, session_id);
-                if (res) {
-                        ret = TRUE;
-                }
-        }
-
-        if (! ret && g_strcmp0 (seat_id, "/org/freedesktop/ConsoleKit/Seat1") == 0) {
-                res = create_transient_display (connection, error);
-                if (res) {
-                        ret = TRUE;
-                }
-        }
-
-        return ret;
-}
-#endif
-
-#ifdef WITH_SYSTEMD
-
-static gboolean
-activate_session_id_for_systemd (GDBusConnection *connection,
-                                 const char      *seat_id,
-                                 const char      *session_id)
+activate_session_id (GDBusConnection *connection,
+                     const char      *seat_id,
+                     const char      *session_id)
 {
         GError *local_error = NULL;
         GVariant *reply;
@@ -677,8 +373,8 @@
 }
 
 static gboolean
-get_login_window_session_id_for_systemd (const char  *seat_id,
-                                         char       **session_id)
+get_login_window_session_id (const char  *seat_id,
+                             char       **session_id)
 {
         gboolean   ret;
         int        res, i;
@@ -746,8 +442,8 @@
 }
 
 static gboolean
-goto_login_session_for_systemd (GDBusConnection  *connection,
-                                GError          **error)
+goto_login_session (GDBusConnection  *connection,
+                    GError          **error)
 {
         gboolean        ret;
         int             res;
@@ -801,9 +497,9 @@
                 return FALSE;
         }
 
-        res = get_login_window_session_id_for_systemd (seat_id, &session_id);
+        res = get_login_window_session_id (seat_id, &session_id);
         if (res && session_id != NULL) {
-                res = activate_session_id_for_systemd (connection, seat_id, session_id);
+                res = activate_session_id (connection, seat_id, session_id);
 
                 if (res) {
                         ret = TRUE;
@@ -822,7 +518,6 @@
 
         return ret;
 }
-#endif
 
 gboolean
 gdm_goto_login_session (GError **error)
@@ -838,17 +533,7 @@
                 return FALSE;
         }
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return goto_login_session_for_systemd (connection, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return goto_login_session_for_ck (connection, error);
-#else
-        return FALSE;
-#endif
+        return goto_login_session (connection, error);
 }
 
 static void
diff '--exclude=.git' -urN a/common/gdm-common.h b/common/gdm-common.h
--- a/common/gdm-common.h	2015-09-18 15:33:26.000000000 -0400
+++ b/common/gdm-common.h	2017-12-06 18:08:04.283803877 -0500
@@ -33,9 +33,6 @@
 
 #define GDM_CUSTOM_SESSION  "custom"
 
-/* check if logind is running */
-#define LOGIND_RUNNING() (access("/run/systemd/seats/", F_OK) >= 0)
-
 GQuark gdm_common_error_quark (void);
 #define GDM_COMMON_ERROR gdm_common_error_quark()
 
diff '--exclude=.git' -urN a/common/gdm-log.c b/common/gdm-log.c
--- a/common/gdm-log.c	2015-09-18 08:46:28.000000000 -0400
+++ b/common/gdm-log.c	2017-12-06 18:08:04.283803877 -0500
@@ -30,9 +30,7 @@
 #include <unistd.h>
 
 #include <syslog.h>
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
-#endif
 
 #include <glib.h>
 #include <glib/gstdio.h>
@@ -135,27 +133,7 @@
 
         initialized = TRUE;
 
-#ifdef WITH_SYSTEMD
-        is_sd_booted = sd_booted () > 0;
-#endif
-
         g_log_set_default_handler (gdm_log_default_handler, NULL);
-
-        /* Only set up syslog if !systemd, otherwise with systemd
-         * enabled, we keep the default GLib log handler which goes to
-         * stderr, which is routed to the appropriate place in the
-         * systemd service file.
-         */
-        if (!is_sd_booted) {
-                prg_name = g_get_prgname ();
-
-                options = LOG_PID;
-#ifdef LOG_PERROR
-                options |= LOG_PERROR;
-#endif
-
-                openlog (prg_name, options, LOG_DAEMON);
-        }
 }
 
 void
diff '--exclude=.git' -urN a/configure.ac b/configure.ac
--- a/configure.ac	2015-09-18 15:36:37.000000000 -0400
+++ b/configure.ac	2017-12-06 18:10:49.118986158 -0500
@@ -238,15 +238,7 @@
                            [Use TCP Wrappers @<:@default=auto@:>@]),,
             with_tcp_wrappers=auto)
 
-AC_ARG_WITH(console-kit,
-            AS_HELP_STRING([--with-console-kit],
-                           [Add ConsoleKit support @<:@default=auto@:>@]),,
-            with_console_kit=no)
-
-AC_ARG_WITH(systemd,
-            AS_HELP_STRING([--with-systemd],
-                           [Add systemd support @<:@default=auto@:>@]),
-            [with_systemd=$withval], [with_systemd=auto])
+
 AC_ARG_WITH([systemdsystemunitdir],
             AS_HELP_STRING([--with-systemdsystemunitdir=DIR],
                            [Directory for systemd service files]),
@@ -259,7 +251,7 @@
 	      AS_HELP_STRING([--enable-wayland-support],
                              [Enable support for wayland sessions  @<:@default=auto@:>@]),
               [enable_wayland_support=$enableval],
-              [enable_wayland_support=auto])
+              [enable_wayland_support=yes])
 
 AC_ARG_WITH(plymouth,
             AS_HELP_STRING([--with-plymouth],
@@ -872,58 +864,24 @@
 CPPFLAGS="$xinerama_save_cppflags"
 
 dnl ---------------------------------------------------------------------------
-dnl - Check for ConsoleKit support
-dnl ---------------------------------------------------------------------------
-
-use_console_kit=no
-if test "x$with_console_kit" != "xno" ; then
-	use_console_kit=yes
-	AC_DEFINE(WITH_CONSOLE_KIT, 1, [Define to enable ConsoleKit support])
-fi
-AM_CONDITIONAL(WITH_CONSOLE_KIT, test x$use_console_kit = xyes)
-AC_SUBST(WITH_CONSOLE_KIT)
-
-dnl ---------------------------------------------------------------------------
 dnl - Check for systemd support
 dnl ---------------------------------------------------------------------------
 
 PKG_CHECK_MODULES(SYSTEMD,
-                  [libsystemd-login >= 186 libsystemd-daemon],
-                  [have_systemd=yes], [have_systemd=no])
+                  [libsystemd])
 
-if test "x$with_systemd" = "xauto" ; then
-        if test x$have_systemd = xno ; then
-                use_systemd=no
-        else
-                use_systemd=yes
-        fi
-else
-        use_systemd="$with_systemd"
-fi
-
-if test "x$use_systemd" != "xno" ; then
-        if test "x$have_systemd" = "xno"; then
-                AC_MSG_ERROR([Systemd support explicitly required, but systemd not found])
-        fi
-
-        AC_DEFINE(WITH_SYSTEMD, 1, [Define to enable systemd support])
-fi
 AC_SUBST(SYSTEMD_CFLAGS)
 AC_SUBST(SYSTEMD_LIBS)
 
 PKG_CHECK_MODULES(JOURNALD,
-                  [libsystemd-journal],
+                  [libsystemd],
                   [have_journald=yes], [have_journald=no])
 
 if test "x$enable_systemd_journal" = "xauto" ; then
-        if test x$use_systemd = xyes ; then
-                if test x$have_journald = xno ; then
-                        use_journald=no
-                else
-                        use_journald=yes
-                fi
-        else
+        if test x$have_journald = xno ; then
                 use_journald=no
+        else
+                use_journald=yes
         fi
 
 else
@@ -940,17 +898,7 @@
 AC_SUBST(JOURNALD_CFLAGS)
 AC_SUBST(JOURNALD_LIBS)
 
-if test "x$enable_wayland_support" = "xauto" ; then
-        use_wayland="$use_systemd";
-else
-        use_wayland="$enable_wayland_support"
-fi
-
-if test "x$use_wayland" != "xno" ; then
-        if test "x$have_systemd" = "xno"; then
-                AC_MSG_ERROR([wayland support explicitly required, but logind not found])
-        fi
-
+if test "x$enable_wayland_support" != "xno" ; then
         AC_DEFINE(ENABLE_WAYLAND_SUPPORT, 1, [Define to enable wayland support])
 fi
 
@@ -961,7 +909,6 @@
 if test "x$with_systemdsystemunitdir" != xno; then
         AC_SUBST(SYSTEMD_SYSTEM_UNIT_DIR, [$with_systemdsystemunitdir])
 fi
-AM_CONDITIONAL(HAVE_SYSTEMD, [test -n "$with_systemdsystemunitdir" -a "x$with_systemdsystemunitdir" != xno -a "x$use_systemd" = "xyes" ])
 
 dnl ---------------------------------------------------------------------------
 dnl - Check for plymouth support
@@ -1115,14 +1062,6 @@
 AC_SUBST(GDM_CUSTOM_CONF)
 AC_SUBST(GDM_OLD_CONF, '${gdmconfdir}/gdm.conf')
 
-AC_ARG_WITH(consolekit-directory,
-              [AC_HELP_STRING([--with-consolekit-directory],
-                              [Specify the directory of ck-get-x11-display-device @<:@default=libexecdir@:>@])],,
-                              [with_consolekit_directory="\${libexecdir}"])
-
-CONSOLEKIT_DIR=$with_consolekit_directory
-AC_SUBST(CONSOLEKIT_DIR)
-
 AC_ARG_WITH(gnome-settings-daemon-directory,
               [AC_HELP_STRING([--with-gnome-settings-daemon-directory],
                               [Specify the directory of gnome-settings-daemon used by the chooser @<:@default=libexecdir@:>@])],,
@@ -1604,7 +1543,6 @@
         dmconfdir:                ${dmconfdir}
         localstatedir:            ${localstatedir}
         datadir:                  ${datadir}
-	consolekit location:      ${with_consolekit_directory}
 	gnome-settings-daemon location: ${with_gnome_settings_daemon_directory}
 	gnome-session-check-accel location: ${with_check_accelerated_directory}
 	source code location:	  ${srcdir}
@@ -1634,8 +1572,6 @@
 "        Xinerama support:         ${XINERAMA_SUPPORT}
         XDMCP support:            ${XDMCP_SUPPORT}
         SELinux support:          ${use_selinux}
-        ConsoleKit support:       ${use_console_kit}
-        systemd support:          ${use_systemd}
         systemd unit dir:         ${with_systemdsystemunitdir}
         plymouth support:         ${use_plymouth}
         wayland support:          ${use_wayland}
@@ -1643,15 +1579,3 @@
         Initial VT:               ${GDM_INITIAL_VT}
         Enable documentation:     ${enable_documentation}
 "
-
-if test x"${use_console_kit}" = x"yes"; then
-        echo \
-"       WARNING:
-        ConsoleKit support is deprecated and is going to be removed before
-        the next major release.  More details, and patches to add back in
-        ConsoleKit support can be found here:
-
-                https://wiki.gnome.org/Projects/ConsoleKit
-"
-fi
-
diff '--exclude=.git' -urN a/daemon/Makefile.am b/daemon/Makefile.am
--- a/daemon/Makefile.am	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/Makefile.am	2017-12-06 18:08:04.284803872 -0500
@@ -20,7 +20,6 @@
 	-DGDM_SCREENSHOT_DIR=\"$(GDM_SCREENSHOT_DIR)\"		\
 	-DGDM_CACHE_DIR=\""$(localstatedir)/cache/gdm"\"	\
 	-DGDM_SESSION_DEFAULT_PATH=\"$(GDM_SESSION_DEFAULT_PATH)\" \
-	-DCONSOLEKIT_DIR=\"$(CONSOLEKIT_DIR)\" \
 	$(DISABLE_DEPRECATED_CFLAGS)			\
 	$(DAEMON_CFLAGS)				\
 	$(XLIB_CFLAGS)					\
@@ -265,11 +264,6 @@
 	$(XDMCP_SOURCES)	\
 	$(NULL)
 
-CONSOLE_KIT_SOURCES = 		\
-	$(NULL)
-
-EXTRA_gdm_SOURCES += $(CONSOLE_KIT_SOURCES)
-
 gdm_LDADD = \
 	$(top_builddir)/common/libgdmcommon.la	\
 	$(XLIB_LIBS)				\
@@ -281,10 +275,6 @@
 	$(EXTRA_DAEMON_LIBS)			\
 	$(NULL)
 
-if WITH_CONSOLE_KIT
-gdm_SOURCES += $(CONSOLE_KIT_SOURCES)
-endif
-
 CLEANFILES =					\
 	gdm-display-glue.c			\
 	gdm-local-display-factory-glue.c	\
diff '--exclude=.git' -urN a/daemon/gdm-launch-environment.c b/daemon/gdm-launch-environment.c
--- a/daemon/gdm-launch-environment.c	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-launch-environment.c	2017-12-06 18:08:04.284803872 -0500
@@ -282,9 +282,6 @@
                 char *seat_id;
 
                 seat_id = launch_environment->priv->x11_display_seat_id;
-                if (g_str_has_prefix (seat_id, "/org/freedesktop/ConsoleKit/")) {
-                        seat_id += strlen ("/org/freedesktop/ConsoleKit/");
-                }
 
                 g_hash_table_insert (hash, g_strdup ("GDM_SEAT_ID"), g_strdup (seat_id));
         }
@@ -313,8 +310,6 @@
                 gdm_session_set_environment_variable (launch_environment->priv->session, key, value);
         }
         g_hash_table_destroy (hash);
-
-        gdm_session_select_session_type (launch_environment->priv->session, "LoginWindow");
 }
 
 static void
diff '--exclude=.git' -urN a/daemon/gdm-local-display-factory.c b/daemon/gdm-local-display-factory.c
--- a/daemon/gdm-local-display-factory.c	2015-09-18 15:36:35.000000000 -0400
+++ b/daemon/gdm-local-display-factory.c	2017-12-06 18:08:04.284803872 -0500
@@ -42,7 +42,6 @@
 
 #define GDM_LOCAL_DISPLAY_FACTORY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GDM_TYPE_LOCAL_DISPLAY_FACTORY, GdmLocalDisplayFactoryPrivate))
 
-#define CK_SEAT1_PATH                       "/org/freedesktop/ConsoleKit/Seat1"
 #define SYSTEMD_SEAT0_PATH                  "seat0"
 
 #define GDM_DBUS_PATH                       "/org/gnome/DisplayManager"
@@ -60,10 +59,8 @@
         /* FIXME: this needs to be per seat? */
         guint            num_failures;
 
-#ifdef WITH_SYSTEMD
         guint            seat_new_id;
         guint            seat_removed_id;
-#endif
 };
 
 enum {
@@ -83,7 +80,6 @@
                                                          GParamSpec                  *arg1,
                                                          GdmLocalDisplayFactory      *factory);
 
-static void gdm_local_display_factory_start_monitor (GdmLocalDisplayFactory *factory);
 static gboolean gdm_local_display_factory_sync_seats    (GdmLocalDisplayFactory *factory);
 static gpointer local_display_factory_object = NULL;
 
@@ -194,20 +190,8 @@
 static const char *
 get_seat_of_transient_display (GdmLocalDisplayFactory *factory)
 {
-        const char *seat_id = NULL;
-
         /* FIXME: don't hardcode seat */
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING() > 0) {
-                seat_id = SYSTEMD_SEAT0_PATH;
-        }
-#endif
-
-        if (seat_id == NULL) {
-                seat_id = CK_SEAT1_PATH;
-        }
-
-        return seat_id;
+        return SYSTEMD_SEAT0_PATH;
 }
 
 /*
@@ -232,19 +216,7 @@
 
         g_debug ("GdmLocalDisplayFactory: Creating transient display");
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING() > 0) {
-                display = gdm_local_display_new ();
-        }
-#endif
-
-        if (display == NULL) {
-                guint32 num;
-
-                num = take_next_display_number (factory);
-
-                display = gdm_legacy_display_new (num);
-        }
+        display = gdm_local_display_new ();
 
         seat_id = get_seat_of_transient_display (factory);
         g_object_set (display,
@@ -272,26 +244,6 @@
         return ret;
 }
 
-static gboolean
-ensure_initial_display_configuration (GdmLocalDisplayFactory *factory)
-{
-        GdmDisplay *display;
-
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                if (!factory->priv->seat_new_id) {
-                        gdm_local_display_factory_start_monitor (factory);
-                }
-                return gdm_local_display_factory_sync_seats (factory);
-        }
-#endif
-
-        /* On ConsoleKit just create Seat1, and that's it. */
-        display = create_display (factory, CK_SEAT1_PATH, NULL, TRUE);
-
-        return display != NULL;
-}
-
 static void
 on_display_status_changed (GdmDisplay             *display,
                            GParamSpec             *arg1,
@@ -338,7 +290,7 @@
                         /* reset num failures */
                         factory->priv->num_failures = 0;
 
-                        ensure_initial_display_configuration (factory);
+                        gdm_local_display_factory_sync_seats (factory);
                 }
                 break;
         case GDM_DISPLAY_FAILED:
@@ -420,14 +372,12 @@
         g_debug ("GdmLocalDisplayFactory: Adding display on seat %s", seat_id);
 
 
-#ifdef WITH_SYSTEMD
         if (g_strcmp0 (seat_id, "seat0") == 0) {
                 display = gdm_local_display_new ();
                 if (session_type != NULL) {
                         g_object_set (G_OBJECT (display), "session-type", session_type, NULL);
                 }
         }
-#endif
 
         if (display == NULL) {
                 guint32 num;
@@ -452,8 +402,6 @@
         return display;
 }
 
-#ifdef WITH_SYSTEMD
-
 static void
 delete_display (GdmLocalDisplayFactory *factory,
                 const char             *seat_id) {
@@ -591,8 +539,6 @@
         }
 }
 
-#endif
-
 static void
 on_display_added (GdmDisplayStore        *display_store,
                   const char             *id,
@@ -630,7 +576,6 @@
 gdm_local_display_factory_start (GdmDisplayFactory *base_factory)
 {
         GdmLocalDisplayFactory *factory = GDM_LOCAL_DISPLAY_FACTORY (base_factory);
-        gboolean                display_started;
         GdmDisplayStore *store;
 
         g_return_val_if_fail (GDM_IS_LOCAL_DISPLAY_FACTORY (factory), FALSE);
@@ -647,9 +592,8 @@
                           G_CALLBACK (on_display_removed),
                           factory);
 
-        display_started = ensure_initial_display_configuration (factory);
-
-        return display_started;
+        gdm_local_display_factory_start_monitor (factory);
+        return gdm_local_display_factory_sync_seats (factory);
 }
 
 static gboolean
@@ -660,9 +604,7 @@
 
         g_return_val_if_fail (GDM_IS_LOCAL_DISPLAY_FACTORY (factory), FALSE);
 
-#ifdef WITH_SYSTEMD
         gdm_local_display_factory_stop_monitor (factory);
-#endif
 
         store = gdm_display_factory_get_display_store (GDM_DISPLAY_FACTORY (factory));
 
@@ -818,9 +760,7 @@
 
         g_hash_table_destroy (factory->priv->used_display_numbers);
 
-#ifdef WITH_SYSTEMD
         gdm_local_display_factory_stop_monitor (factory);
-#endif
 
         G_OBJECT_CLASS (gdm_local_display_factory_parent_class)->finalize (object);
 }
diff '--exclude=.git' -urN a/daemon/gdm-manager.c b/daemon/gdm-manager.c
--- a/daemon/gdm-manager.c	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-manager.c	2017-12-06 18:08:04.285803867 -0500
@@ -34,9 +34,7 @@
 #include <glib/gstdio.h>
 #include <glib-object.h>
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-login.h>
-#endif
 
 #include "gdm-common.h"
 
@@ -59,15 +57,6 @@
 #define GDM_MANAGER_PATH          GDM_DBUS_PATH "/Manager"
 #define GDM_MANAGER_DISPLAYS_PATH GDM_DBUS_PATH "/Displays"
 
-#define CK_NAME      "org.freedesktop.ConsoleKit"
-#define CK_PATH      "/org/freedesktop/ConsoleKit"
-#define CK_INTERFACE "org.freedesktop.ConsoleKit"
-
-#define CK_MANAGER_PATH      "/org/freedesktop/ConsoleKit/Manager"
-#define CK_MANAGER_INTERFACE "org.freedesktop.ConsoleKit.Manager"
-#define CK_SEAT_INTERFACE    "org.freedesktop.ConsoleKit.Seat"
-#define CK_SESSION_INTERFACE "org.freedesktop.ConsoleKit.Session"
-
 #define INITIAL_SETUP_USERNAME "gnome-initial-setup"
 
 typedef struct
@@ -213,10 +202,9 @@
 }
 #endif
 
-#ifdef WITH_SYSTEMD
 static char *
-get_session_id_for_pid_systemd (pid_t    pid,
-                                GError **error)
+get_session_id_for_pid (pid_t    pid,
+                        GError **error)
 {
         char *session, *gsession;
         int ret;
@@ -241,61 +229,11 @@
                 return NULL;
         }
 }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-static char *
-get_session_id_for_pid_consolekit (GDBusConnection  *connection,
-                                   pid_t             pid,
-                                   GError          **error)
-{
-        GVariant *reply;
-        char *retval;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             "org.freedesktop.ConsoleKit",
-                                             "/org/freedesktop/ConsoleKit/Manager",
-                                             "org.freedesktop.ConsoleKit.Manager",
-                                             "GetSessionForUnixProcess",
-                                             g_variant_new ("(u)", pid),
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, error);
-        if (reply == NULL) {
-                return NULL;
-        }
-
-        g_variant_get (reply, "(o)", &retval);
-        g_variant_unref (reply);
-
-        return retval;
-}
-#endif
-
-static char *
-get_session_id_for_pid (GDBusConnection  *connection,
-                        pid_t             pid,
-                        GError          **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return get_session_id_for_pid_systemd (pid, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return get_session_id_for_pid_consolekit (connection, pid, error);
-#endif
-
-        return NULL;
-}
 
-#ifdef WITH_SYSTEMD
 static gboolean
-get_uid_for_systemd_session_id (const char  *session_id,
-                                uid_t       *uid,
-                                GError     **error)
+get_uid_for_session_id (const char  *session_id,
+                        uid_t       *uid,
+                        GError     **error)
 {
         int ret;
 
@@ -312,60 +250,6 @@
 
         return TRUE;
 }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-static gboolean
-get_uid_for_consolekit_session_id (GDBusConnection  *connection,
-                                   const char       *session_id,
-                                   uid_t            *out_uid,
-                                   GError          **error)
-{
-        GVariant *reply;
-        guint32 uid;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             "org.freedesktop.ConsoleKit",
-                                             session_id,
-                                             "org.freedesktop.ConsoleKit.Session",
-                                             "GetUnixUser",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(u)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             error);
-        if (reply == NULL) {
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(u)", &uid);
-        g_variant_unref (reply);
-
-        *out_uid = (uid_t) uid;
-
-        return TRUE;
-}
-#endif
-
-static gboolean
-get_uid_for_session_id (GDBusConnection  *connection,
-                        const char       *session_id,
-                        uid_t            *uid,
-                        GError          **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return get_uid_for_systemd_session_id (session_id, uid, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return get_uid_for_consolekit_session_id (connection, session_id, uid, error);
-#endif
-
-        return FALSE;
-}
 
 static gboolean
 lookup_by_session_id (const char *id,
@@ -379,50 +263,10 @@
         return g_strcmp0 (current, looking_for) == 0;
 }
 
-#ifdef WITH_CONSOLE_KIT
-static gboolean
-is_consolekit_login_session (GdmManager       *self,
-                             GDBusConnection  *connection,
-                             const char       *session_id,
-                             GError          **error)
-{
-        GVariant *reply;
-        char *session_type = NULL;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             "org.freedesktop.ConsoleKit",
-                                             session_id,
-                                             "org.freedesktop.ConsoleKit.Session",
-                                             "GetSessionType",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(s)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             error);
-        if (reply == NULL) {
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(s)", &session_type);
-        g_variant_unref (reply);
-
-        if (g_strcmp0 (session_type, "LoginWindow") != 0) {
-                g_free (session_type);
-
-                return FALSE;
-        }
-
-        g_free (session_type);
-        return TRUE;
-}
-#endif
-
-#ifdef WITH_SYSTEMD
 static gboolean
-is_systemd_login_session (GdmManager  *self,
-                          const char  *session_id,
-                          GError     **error)
+is_login_session (GdmManager  *self,
+                  const char  *session_id,
+                  GError     **error)
 {
         char *session_class = NULL;
         int ret;
@@ -447,32 +291,11 @@
         g_free (session_class);
         return TRUE;
 }
-#endif
-
-static gboolean
-is_login_session (GdmManager       *self,
-                  GDBusConnection  *connection,
-                  const char       *session_id,
-                  GError          **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return is_systemd_login_session (self, session_id, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return is_consolekit_login_session (self, connection, session_id, error);
-#endif
-
-        return FALSE;
-}
 
-#ifdef WITH_SYSTEMD
 static gboolean
-activate_session_id_for_systemd (GdmManager   *manager,
-                                 const char *seat_id,
-                                 const char *session_id)
+activate_session_id (GdmManager *manager,
+                     const char *seat_id,
+                     const char *session_id)
 {
         GError *error = NULL;
         GVariant *reply;
@@ -499,74 +322,15 @@
 
         return TRUE;
 }
-#endif
 
-#ifdef WITH_CONSOLE_KIT
 static gboolean
-activate_session_id_for_ck (GdmManager *manager,
-                            const char *seat_id,
-                            const char *session_id)
+session_unlock (GdmManager *manager,
+                const char *ssid)
 {
         GError *error = NULL;
         GVariant *reply;
 
-        reply = g_dbus_connection_call_sync (manager->priv->connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             "org.freedesktop.ConsoleKit.Seat",
-                                             "ActivateSession",
-                                             g_variant_new ("(o)", session_id),
-                                             NULL, /* expected reply */
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             &error);
-        if (reply == NULL) {
-                g_debug ("GdmManager: ConsoleKit %s raised:\n %s\n\n",
-                         g_dbus_error_get_remote_error (error), error->message);
-                g_error_free (error);
-
-                /* It is very likely that the "error" just reported is
-                 * that the session is already active.  Unfortunately,
-                 * ConsoleKit doesn't use proper error codes and it
-                 * translates the error message, so we have no real way
-                 * to detect this case...
-                 */
-                return TRUE;
-        }
-
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-#endif
-
-static gboolean
-activate_session_id (GdmManager *manager,
-                     const char *seat_id,
-                     const char *session_id)
-{
-
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return activate_session_id_for_systemd (manager, seat_id, session_id);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return activate_session_id_for_ck (manager, seat_id, session_id);
-#else
-        return FALSE;
-#endif
-}
-
-#ifdef WITH_SYSTEMD
-static gboolean
-session_unlock_for_systemd (GdmManager *manager,
-                            const char *ssid)
-{
-        GError *error = NULL;
-        GVariant *reply;
+        g_debug ("Unlocking session %s", ssid);
 
         reply = g_dbus_connection_call_sync (manager->priv->connection,
                                              "org.freedesktop.login1",
@@ -590,59 +354,6 @@
 
         return TRUE;
 }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-static gboolean
-session_unlock_for_ck (GdmManager *manager,
-                       const char *ssid)
-{
-        GError *error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (manager->priv->connection,
-                                             CK_NAME,
-                                             ssid,
-                                             CK_SESSION_INTERFACE,
-                                             "Unlock",
-                                             NULL, /* parameters */
-                                             NULL, /* expected reply */
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             &error);
-        if (reply == NULL) {
-                g_debug ("GdmManager: ConsoleKit %s raised:\n %s\n\n",
-                         g_dbus_error_get_remote_error (error), error->message);
-                g_error_free (error);
-                return FALSE;
-        }
-
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-#endif
-
-static gboolean
-session_unlock (GdmManager *manager,
-                const char *ssid)
-{
-
-        g_debug ("Unlocking session %s", ssid);
-
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return session_unlock_for_systemd (manager, ssid);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return session_unlock_for_ck (manager, ssid);
-#else
-        return TRUE;
-#endif
-}
 
 static GdmSession *
 find_session_for_user_on_seat (GdmManager *manager,
@@ -674,43 +385,10 @@
         return NULL;
 }
 
-#ifdef WITH_CONSOLE_KIT
 static gboolean
-is_consolekit_remote_session (GdmManager       *self,
-                             GDBusConnection  *connection,
-                             const char       *session_id,
-                             GError          **error)
-{
-        GVariant *reply;
-        gboolean is_remote;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             "org.freedesktop.ConsoleKit",
-                                             session_id,
-                                             "org.freedesktop.ConsoleKit.Session",
-                                             "IsLocal",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(b)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             error);
-        if (reply == NULL) {
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(b)", &is_remote);
-        g_variant_unref (reply);
-
-        return is_remote;
-}
-#endif
-
-#ifdef WITH_SYSTEMD
-static gboolean
-is_systemd_remote_session (GdmManager  *self,
-                           const char  *session_id,
-                           GError     **error)
+is_remote_session (GdmManager  *self,
+                   const char  *session_id,
+                   GError     **error)
 {
         char *seat;
         int ret;
@@ -736,31 +414,10 @@
 
         return is_remote;
 }
-#endif
-
-static gboolean
-is_remote_session (GdmManager       *self,
-                  GDBusConnection  *connection,
-                  const char       *session_id,
-                  GError          **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return is_systemd_remote_session (self, session_id, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return is_consolekit_remote_session (self, connection, session_id, error);
-#endif
-
-        return FALSE;
-}
 
-#ifdef WITH_SYSTEMD
 static char *
-get_seat_id_for_systemd_session_id (const char  *session_id,
-                                    GError     **error)
+get_seat_id_for_session_id (const char  *session_id,
+                            GError     **error)
 {
         int ret;
         char *seat, *out_seat;
@@ -785,61 +442,10 @@
 
         return out_seat;
 }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-static char *
-get_seat_id_for_consolekit_session_id (GDBusConnection  *connection,
-                                       const char       *session_id,
-                                       GError          **error)
-{
-        GVariant *reply;
-        char *retval;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             "org.freedesktop.ConsoleKit",
-                                             session_id,
-                                             "org.freedesktop.ConsoleKit.Session",
-                                             "GetSeatId",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             error);
-        if (reply == NULL) {
-                return NULL;
-        }
-
-        g_variant_get (reply, "(o)", &retval);
-        g_variant_unref (reply);
-
-        return retval;
-}
-#endif
-
-static char *
-get_seat_id_for_session_id (GDBusConnection  *connection,
-                            const char       *session_id,
-                            GError          **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return get_seat_id_for_systemd_session_id (session_id, error);
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        return get_seat_id_for_consolekit_session_id (connection, session_id, error);
-#endif
-
-        return NULL;
-}
 
-#ifdef WITH_SYSTEMD
 static char *
-get_tty_for_systemd_session_id (const char  *session_id,
-                                GError     **error)
+get_tty_for_session_id (const char  *session_id,
+                        GError     **error)
 {
         int ret;
         char *tty, *out_tty;
@@ -863,20 +469,6 @@
 
         return out_tty;
 }
-#endif
-
-static char *
-get_tty_for_session_id (const char  *session_id,
-                        GError     **error)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return get_tty_for_systemd_session_id (session_id, error);
-        }
-#endif
-
-        return NULL;
-}
 
 static void
 get_display_and_details_for_bus_sender (GdmManager       *self,
@@ -920,7 +512,7 @@
                 goto out;
         }
 
-        session_id = get_session_id_for_pid (connection, pid, &error);
+        session_id = get_session_id_for_pid (pid, &error);
 
         if (session_id == NULL) {
                 g_debug ("GdmManager: Error while retrieving session id for sender: %s",
@@ -934,7 +526,7 @@
         }
 
         if (out_is_login_screen != NULL) {
-                *out_is_login_screen = is_login_session (self, connection, session_id, &error);
+                *out_is_login_screen = is_login_session (self, session_id, &error);
 
                 if (error != NULL) {
                         g_debug ("GdmManager: Error while checking if sender is login screen: %s",
@@ -944,7 +536,7 @@
                 }
         }
 
-        if (!get_uid_for_session_id (connection, session_id, &session_uid, &error)) {
+        if (!get_uid_for_session_id (session_id, &session_uid, &error)) {
                 g_debug ("GdmManager: Error while retrieving uid for session: %s",
                          error->message);
                 g_error_free (error);
@@ -961,7 +553,7 @@
         }
 
         if (out_seat_id != NULL) {
-                *out_seat_id = get_seat_id_for_session_id (connection, session_id, &error);
+                *out_seat_id = get_seat_id_for_session_id (session_id, &error);
 
                 if (error != NULL) {
                         g_debug ("GdmManager: Error while retrieving seat id for session: %s",
@@ -971,7 +563,7 @@
         }
 
         if (out_is_remote != NULL) {
-                *out_is_remote = is_remote_session (self, connection, session_id, &error);
+                *out_is_remote = is_remote_session (self, session_id, &error);
 
                 if (error != NULL) {
                         g_debug ("GdmManager: Error while retrieving remoteness for session: %s",
@@ -1335,8 +927,7 @@
                  * same audit session, ignore it since it doesn't "own" the
                  * reauthentication session
                  */
-                client_session_id = get_session_id_for_pid (self->priv->connection,
-                                                            pid_of_client,
+                client_session_id = get_session_id_for_pid (pid_of_client,
                                                             NULL);
                 session_id = g_object_get_data (G_OBJECT (session), "caller-session-id");
 
@@ -1548,20 +1139,16 @@
 display_is_on_seat0 (GdmDisplay *display)
 {
         gboolean is_on_seat0 = TRUE;
+        char *seat_id = NULL;
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                char *seat_id = NULL;
+        g_object_get (G_OBJECT (display), "seat-id", &seat_id, NULL);
 
-                g_object_get (G_OBJECT (display), "seat-id", &seat_id, NULL);
+        if (g_strcmp0 (seat_id, "seat0") != 0) {
+            is_on_seat0 = FALSE;
+        }
 
-                if (g_strcmp0 (seat_id, "seat0") != 0) {
-                        is_on_seat0 = FALSE;
-                }
+        g_free (seat_id);
 
-                g_free (seat_id);
-        }
-#endif
         return is_on_seat0;
 }
 
@@ -2162,57 +1749,11 @@
 }
 
 static char *
-query_ck_for_display_device (GdmManager *manager,
-                             GdmDisplay *display)
-{
-        char    *out;
-        char    *command;
-        char    *display_name = NULL;
-        int      status;
-        gboolean res;
-        GError  *error;
-
-        g_object_get (G_OBJECT (display),
-                      "x11-display-name", &display_name,
-                      NULL);
-
-        error = NULL;
-        command = g_strdup_printf (CONSOLEKIT_DIR "/ck-get-x11-display-device --display %s",
-                                   display_name);
-        g_free (display_name);
-
-        g_debug ("GdmManager: Running helper %s", command);
-        out = NULL;
-        res = g_spawn_command_line_sync (command,
-                                         &out,
-                                         NULL,
-                                         &status,
-                                         &error);
-        if (! res) {
-                g_warning ("GdmManager: Could not run helper %s: %s", command, error->message);
-                g_error_free (error);
-        } else {
-                out = g_strstrip (out);
-                g_debug ("GdmManager: Got tty: '%s'", out);
-        }
-
-        g_free (command);
-
-        return out;
-}
-
-static char *
 get_display_device (GdmManager *manager,
                     GdmDisplay *display)
 {
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                /* systemd finds the display device out on its own based on the display */
-                return NULL;
-        }
-#endif
-
-        return query_ck_for_display_device (manager, display);
+        /* systemd finds the display device out on its own based on the display */
+        return NULL;
 }
 
 static void
diff '--exclude=.git' -urN a/daemon/gdm-server.c b/daemon/gdm-server.c
--- a/daemon/gdm-server.c	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-server.c	2017-12-06 18:08:04.285803867 -0500
@@ -43,9 +43,7 @@
 #include <linux/vt.h>
 #endif
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
-#endif
 
 #ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
@@ -124,59 +122,11 @@
 
 G_DEFINE_TYPE (GdmServer, gdm_server, G_TYPE_OBJECT)
 
-static char *
-_gdm_server_query_ck_for_display_device (GdmServer *server)
-{
-        char    *out;
-        char    *command;
-        int      status;
-        gboolean res;
-        GError  *error;
-
-        g_return_val_if_fail (GDM_IS_SERVER (server), NULL);
-
-        error = NULL;
-        command = g_strdup_printf (CONSOLEKIT_DIR "/ck-get-x11-display-device --display %s",
-                                   server->priv->display_name);
-
-        g_debug ("GdmServer: Running helper %s", command);
-        out = NULL;
-        res = g_spawn_command_line_sync (command,
-                                         &out,
-                                         NULL,
-                                         &status,
-                                         &error);
-        if (! res) {
-                g_warning ("Could not run helper: %s", error->message);
-                g_error_free (error);
-        } else {
-                out = g_strstrip (out);
-                g_debug ("GdmServer: Got tty: '%s'", out);
-        }
-
-        g_free (command);
-
-        return out;
-}
-
 char *
 gdm_server_get_display_device (GdmServer *server)
 {
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                /* systemd finds the display device out on its own based on the display */
-                return NULL;
-        }
-#endif
-
-        if (server->priv->display_device == NULL) {
-                server->priv->display_device =
-                    _gdm_server_query_ck_for_display_device (server);
-
-                g_object_notify (G_OBJECT (server), "display-device");
-        }
-
-        return g_strdup (server->priv->display_device);
+        /* systemd finds the display device out on its own based on the display */
+        return NULL;
 }
 
 static void
@@ -278,8 +228,6 @@
 
 #define X_SERVER_ARG_FORMAT " -background none -noreset -verbose %s%s"
 
-#ifdef WITH_SYSTEMD
-
         /* This is a temporary hack to work around the fact that XOrg
          * currently lacks support for multi-seat hotplugging for
          * display devices. This bit should be removed as soon as XOrg
@@ -294,10 +242,6 @@
          * wasn't booted using systemd, or b) the wrapper tool is
          * missing, or c) we are running for the main seat 'seat0'. */
 
-        if (!LOGIND_RUNNING()) {
-                goto fallback;
-        }
-
 #ifdef ENABLE_SYSTEMD_JOURNAL
         /* For systemd, we don't have a log file but instead log to stdout,
            so set it to the xserver's built-in default verbosity */
@@ -320,9 +264,8 @@
         return;
 
 fallback:
-#endif
-
         server->priv->command = g_strdup_printf (X_SERVER X_SERVER_ARG_FORMAT, verbosity, debug_options);
+
 }
 
 static gboolean
@@ -372,12 +315,10 @@
                 argv[len++] = g_strdup (server->priv->auth_file);
         }
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING() && server->priv->display_seat_id != NULL) {
+        if (server->priv->display_seat_id != NULL) {
                 argv[len++] = g_strdup ("-seat");
                 argv[len++] = g_strdup (server->priv->display_seat_id);
         }
-#endif
 
         if (server->priv->disable_tcp && ! query_in_arglist) {
                 argv[len++] = g_strdup ("-nolisten");
diff '--exclude=.git' -urN a/daemon/gdm-session-worker-job.c b/daemon/gdm-session-worker-job.c
--- a/daemon/gdm-session-worker-job.c	2015-09-18 08:46:28.000000000 -0400
+++ b/daemon/gdm-session-worker-job.c	2017-12-06 18:08:04.285803867 -0500
@@ -36,9 +36,7 @@
 #include <sys/prctl.h>
 #endif
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
-#endif
 
 #ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
diff '--exclude=.git' -urN a/daemon/gdm-session-worker.c b/daemon/gdm-session-worker.c
--- a/daemon/gdm-session-worker.c	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-session-worker.c	2017-12-06 18:08:04.286803862 -0500
@@ -28,11 +28,9 @@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/wait.h>
-#ifdef WITH_SYSTEMD
 #include <sys/ioctl.h>
 #include <sys/vt.h>
 #include <sys/kd.h>
-#endif
 #include <errno.h>
 #include <grp.h>
 #include <pwd.h>
@@ -51,9 +49,7 @@
 
 #include <X11/Xauth.h>
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
-#endif
 
 #ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
@@ -135,10 +131,6 @@
 
         int               exit_code;
 
-#ifdef WITH_CONSOLE_KIT
-        char             *session_cookie;
-#endif
-
         pam_handle_t     *pam_handle;
 
         GPid              child_pid;
@@ -153,7 +145,6 @@
         char             *hostname;
         char             *username;
         char             *log_file;
-        char             *session_type;
         char             *session_id;
         uid_t             uid;
         gid_t             gid;
@@ -216,204 +207,6 @@
                          G_IMPLEMENT_INTERFACE (GDM_DBUS_TYPE_WORKER,
                                                 worker_interface_init))
 
-#ifdef WITH_CONSOLE_KIT
-static gboolean
-open_ck_session (GdmSessionWorker  *worker)
-{
-        GDBusConnection  *system_bus;
-        GVariantBuilder   builder;
-        GVariant         *parameters;
-        GVariant         *in_args;
-        struct passwd    *pwent;
-        GVariant         *reply;
-        GError           *error = NULL;
-        const char       *display_name;
-        const char       *display_device;
-        const char       *display_hostname;
-        const char       *session_type;
-        gint32            uid;
-
-        g_assert (worker->priv->session_cookie == NULL);
-
-        if (worker->priv->x11_display_name != NULL) {
-                display_name = worker->priv->x11_display_name;
-        } else {
-                display_name = "";
-        }
-        if (worker->priv->hostname != NULL) {
-                display_hostname = worker->priv->hostname;
-        } else {
-                display_hostname = "";
-        }
-        if (worker->priv->display_device != NULL) {
-                display_device = worker->priv->display_device;
-        } else {
-                display_device = "";
-        }
-
-        if (worker->priv->session_type != NULL) {
-                session_type = worker->priv->session_type;
-        } else {
-                session_type = "";
-        }
-
-        g_assert (worker->priv->username != NULL);
-
-        gdm_get_pwent_for_name (worker->priv->username, &pwent);
-        if (pwent == NULL) {
-                goto out;
-        }
-
-        uid = (gint32) pwent->pw_uid;
-
-        error = NULL;
-        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-
-        if (system_bus == NULL) {
-                g_warning ("Couldn't create connection to system bus: %s",
-                           error->message);
-
-                g_error_free (error);
-                goto out;
-        }
-
-        g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(sv)"));
-        g_variant_builder_add_parsed (&builder, "('unix-user', <%i>)", uid);
-        g_variant_builder_add_parsed (&builder, "('x11-display-device', <%s>)", display_device);
-        g_variant_builder_add_parsed (&builder, "('x11-display', <%s>)", display_name);
-        g_variant_builder_add_parsed (&builder, "('remote-host-name', <%s>)", display_hostname);
-        g_variant_builder_add_parsed (&builder, "('is-local', <%b>)", worker->priv->display_is_local);
-        g_variant_builder_add_parsed (&builder, "('session-type', <%s>)", session_type);
-
-        parameters = g_variant_builder_end (&builder);
-        in_args = g_variant_new_tuple (&parameters, 1);
-
-        reply = g_dbus_connection_call_sync (system_bus,
-                                             "org.freedesktop.ConsoleKit",
-                                             "/org/freedesktop/ConsoleKit/Manager",
-                                             "org.freedesktop.ConsoleKit.Manager",
-                                             "OpenSessionWithParameters",
-                                             in_args,
-                                             G_VARIANT_TYPE ("(s)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             &error);
-
-        if (! reply) {
-                g_warning ("%s\n", error->message);
-                g_clear_error (&error);
-                goto out;
-        }
-
-        g_variant_get (reply, "(s)", &worker->priv->session_cookie);
-
-        g_variant_unref (reply);
-
-out:
-        return worker->priv->session_cookie != NULL;
-}
-
-static void
-close_ck_session (GdmSessionWorker *worker)
-{
-        GDBusConnection  *system_bus;
-        GVariant         *reply;
-        GError           *error = NULL;
-        gboolean          was_closed;
-
-        if (worker->priv->session_cookie == NULL) {
-                return;
-        }
-
-        error = NULL;
-        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-
-        if (system_bus == NULL) {
-                g_warning ("Couldn't create connection to system bus: %s",
-                           error->message);
-
-                g_error_free (error);
-                goto out;
-        }
-
-        reply = g_dbus_connection_call_sync (system_bus,
-                                             "org.freedesktop.ConsoleKit",
-                                             "/org/freedesktop/ConsoleKit/Manager",
-                                             "org.freedesktop.ConsoleKit.Manager",
-                                             "CloseSession",
-                                             g_variant_new ("(s)", worker->priv->session_cookie),
-                                             G_VARIANT_TYPE ("(b)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             &error);
-
-        if (! reply) {
-                g_warning ("%s", error->message);
-                g_clear_error (&error);
-                goto out;
-        }
-
-        g_variant_get (reply, "(b)", &was_closed);
-
-        if (!was_closed) {
-                g_warning ("Unable to close ConsoleKit session");
-        }
-
-        g_variant_unref (reply);
-
-out:
-        g_clear_pointer (&worker->priv->session_cookie,
-                         (GDestroyNotify) g_free);
-}
-
-static char *
-get_ck_session_id (GdmSessionWorker *worker)
-{
-        GDBusConnection  *system_bus;
-        GVariant         *reply;
-        GError           *error = NULL;
-        char             *session_id = NULL;
-
-        error = NULL;
-        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-
-        if (system_bus == NULL) {
-                g_warning ("Couldn't create connection to system bus: %s",
-                           error->message);
-
-                g_error_free (error);
-                goto out;
-        }
-
-        reply = g_dbus_connection_call_sync (system_bus,
-                                             "org.freedesktop.ConsoleKit",
-                                             "/org/freedesktop/ConsoleKit/Manager",
-                                             "org.freedesktop.ConsoleKit.Manager",
-                                             "GetSessionForCookie",
-                                             g_variant_new ("(s)", worker->priv->session_cookie),
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             &error);
-
-        if (reply == NULL) {
-                g_warning ("%s", error->message);
-                g_clear_error (&error);
-                goto out;
-        }
-
-        g_variant_get (reply, "(o)", &session_id);
-
-        g_variant_unref (reply);
-
-out:
-        return session_id;
-}
-#endif
-
 /* adapted from glib script_execute */
 static void
 script_execute (const gchar *file,
@@ -961,7 +754,6 @@
         worker->priv->auditor = NULL;
 }
 
-#ifdef WITH_SYSTEMD
 static void
 on_release_display (int signal)
 {
@@ -1087,7 +879,6 @@
 
         close (active_vt_tty_fd);
 }
-#endif
 
 static void
 gdm_session_worker_uninitialize_pam (GdmSessionWorker *worker,
@@ -1118,11 +909,9 @@
 
         gdm_session_worker_stop_auditor (worker);
 
-#ifdef WITH_SYSTEMD
         if (worker->priv->login_vt != worker->priv->session_vt) {
                 jump_to_vt (worker, worker->priv->login_vt);
         }
-#endif
 
         worker->priv->login_vt = 0;
         worker->priv->session_vt = 0;
@@ -1247,12 +1036,10 @@
                 }
         }
 
-#ifdef WITH_SYSTEMD
         /* set seat ID */
-        if (seat_id != NULL && seat_id[0] != '\0' && LOGIND_RUNNING()) {
+        if (seat_id != NULL && seat_id[0] != '\0') {
                 gdm_session_worker_set_environment_variable (worker, "XDG_SEAT", seat_id);
         }
-#endif
 
         if (strcmp (service, "gdm-launch-environment") == 0) {
                 gdm_session_worker_set_environment_variable (worker, "XDG_SESSION_CLASS", "greeter");
@@ -1808,26 +1595,6 @@
         return (const char * const *) pam_getenvlist (worker->priv->pam_handle);
 }
 
-#ifdef WITH_CONSOLE_KIT
-static void
-register_ck_session (GdmSessionWorker *worker)
-{
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                return;
-        }
-#endif
-
-        open_ck_session (worker);
-
-        if (worker->priv->session_cookie != NULL) {
-                gdm_session_worker_set_environment_variable (worker,
-                                                             "XDG_SESSION_COOKIE",
-                                                             worker->priv->session_cookie);
-        }
-}
-#endif
-
 static gboolean
 run_script (GdmSessionWorker *worker,
             const char       *dir)
@@ -1858,9 +1625,6 @@
                  : WIFSIGNALED (status) ? WTERMSIG (status)
                  : -1);
 
-#ifdef WITH_CONSOLE_KIT
-        close_ck_session (worker);
-#endif
 
         gdm_session_worker_uninitialize_pam (worker, PAM_SUCCESS);
 
@@ -2049,14 +1813,12 @@
 
         error_code = PAM_SUCCESS;
 
-#ifdef WITH_SYSTEMD
         /* If we're in new vt mode, jump to the new vt now. There's no need to jump for
          * the other two modes: in the logind case, the session will activate itself when
          * ready, and in the reuse server case, we're already on the correct VT. */
         if (worker->priv->display_mode == GDM_SESSION_DISPLAY_MODE_NEW_VT) {
                 jump_to_vt (worker, worker->priv->session_vt);
         }
-#endif
 
         session_pid = fork ();
 
@@ -2103,7 +1865,6 @@
                         _exit (2);
                 }
 
-#ifdef WITH_SYSTEMD
                 /* Take control of the tty
                  */
                 if (needs_controlling_terminal) {
@@ -2111,7 +1872,6 @@
                                 g_debug ("GdmSessionWorker: could not take control of tty: %m");
                         }
                 }
-#endif
 
 #ifdef HAVE_LOGINCAP
                 if (setusercontext (NULL, passwd_entry, passwd_entry->pw_uid, LOGIN_SETALL) < 0) {
@@ -2256,7 +2016,6 @@
         return TRUE;
 }
 
-#ifdef WITH_SYSTEMD
 static gboolean
 set_up_for_new_vt (GdmSessionWorker *worker)
 {
@@ -2314,7 +2073,6 @@
         close (fd);
         return FALSE;
 }
-#endif
 
 static gboolean
 set_up_for_current_vt (GdmSessionWorker  *worker,
@@ -2403,7 +2161,6 @@
                         return FALSE;
                 }
                 break;
-#ifdef WITH_SYSTEMD
         case GDM_SESSION_DISPLAY_MODE_NEW_VT:
         case GDM_SESSION_DISPLAY_MODE_LOGIND_MANAGED:
                 if (!set_up_for_new_vt (worker)) {
@@ -2414,7 +2171,6 @@
                         return FALSE;
                 }
                 break;
-#endif
         }
 
         flags = 0;
@@ -2444,9 +2200,7 @@
         g_debug ("GdmSessionWorker: state SESSION_OPENED");
         worker->priv->state = GDM_SESSION_WORKER_STATE_SESSION_OPENED;
 
-#ifdef WITH_SYSTEMD
         session_id = gdm_session_worker_get_environment_variable (worker, "XDG_SESSION_ID");
-#endif
 
         /* FIXME: should we do something here?
          * Note that error return status from PreSession script should
@@ -2456,14 +2210,6 @@
          */
         run_script (worker, GDMCONFDIR "/PreSession");
 
-#ifdef WITH_CONSOLE_KIT
-        register_ck_session (worker);
-
-        if (session_id == NULL) {
-                session_id = get_ck_session_id (worker);
-        }
-#endif
-
         if (session_id != NULL) {
                 g_free (worker->priv->session_id);
                 worker->priv->session_id = session_id;
@@ -2568,19 +2314,6 @@
 }
 
 static gboolean
-gdm_session_worker_handle_set_session_type (GdmDBusWorker         *object,
-                                            GDBusMethodInvocation *invocation,
-                                            const char            *session_type)
-{
-        GdmSessionWorker *worker = GDM_SESSION_WORKER (object);
-        g_debug ("GdmSessionWorker: session type set to %s", session_type);
-        g_free (worker->priv->session_type);
-        worker->priv->session_type = g_strdup (session_type);
-        gdm_dbus_worker_complete_set_session_type (object, invocation);
-        return TRUE;
-}
-
-static gboolean
 gdm_session_worker_handle_set_session_display_mode (GdmDBusWorker         *object,
                                                     GDBusMethodInvocation *invocation,
                                                     const char            *str)
@@ -3388,7 +3121,6 @@
         interface->handle_open = gdm_session_worker_handle_open;
         interface->handle_set_language_name = gdm_session_worker_handle_set_language_name;
         interface->handle_set_session_name = gdm_session_worker_handle_set_session_name;
-        interface->handle_set_session_type = gdm_session_worker_handle_set_session_type;
         interface->handle_set_session_display_mode = gdm_session_worker_handle_set_session_display_mode;
         interface->handle_set_environment_variable = gdm_session_worker_handle_set_environment_variable;
         interface->handle_start_program = gdm_session_worker_handle_start_program;
diff '--exclude=.git' -urN a/daemon/gdm-session-worker.xml b/daemon/gdm-session-worker.xml
--- a/daemon/gdm-session-worker.xml	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-session-worker.xml	2017-12-06 18:08:04.286803862 -0500
@@ -13,9 +13,6 @@
     <method name="SetSessionName">
       <arg name="session_name" direction="in" type="s" />
     </method>
-    <method name="SetSessionType">
-      <arg name="session_type" direction="in" type="s"/>
-    </method>
     <method name="SetSessionDisplayMode">
       <arg name="mode" direction="in" type="s"/>
     </method>
diff '--exclude=.git' -urN a/daemon/gdm-session.c b/daemon/gdm-session.c
--- a/daemon/gdm-session.c	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-session.c	2017-12-06 18:08:04.286803862 -0500
@@ -2945,10 +2945,6 @@
                  self->priv->is_program_session? "yes" : "no",
                  self->priv->display_seat_id);
 
-        if (!LOGIND_RUNNING()) {
-                return GDM_SESSION_DISPLAY_MODE_REUSE_VT;
-        }
-
 #ifdef ENABLE_WAYLAND_SUPPORT
         /* Wayland sessions are for now assumed to run in a
          * mutter-launch-like environment, so we allocate
@@ -2990,27 +2986,6 @@
 }
 
 void
-gdm_session_select_session_type (GdmSession *self,
-                                 const char *text)
-{
-        GHashTableIter iter;
-        gpointer key, value;
-
-        g_debug ("GdmSession: selecting session type '%s'", text);
-
-        g_hash_table_iter_init (&iter, self->priv->conversations);
-        while (g_hash_table_iter_next (&iter, &key, &value)) {
-                GdmSessionConversation *conversation;
-
-                conversation = (GdmSessionConversation *) value;
-
-                gdm_dbus_worker_call_set_session_type (conversation->worker_proxy,
-                                                       text,
-                                                       NULL, NULL, NULL);
-        }
-}
-
-void
 gdm_session_select_session (GdmSession *self,
                             const char *text)
 {
diff '--exclude=.git' -urN a/daemon/gdm-session.h b/daemon/gdm-session.h
--- a/daemon/gdm-session.h	2015-09-18 15:33:26.000000000 -0400
+++ b/daemon/gdm-session.h	2017-12-06 18:08:04.286803862 -0500
@@ -176,8 +176,6 @@
                                                            const char *text);
 void              gdm_session_select_program              (GdmSession *session,
                                                            const char *command_line);
-void              gdm_session_select_session_type         (GdmSession *session,
-                                                           const char *session_type);
 void              gdm_session_select_session              (GdmSession *session,
                                                            const char *session_name);
 void              gdm_session_select_user                 (GdmSession *session,
diff '--exclude=.git' -urN a/data/Makefile.am b/data/Makefile.am
--- a/data/Makefile.am	2015-09-18 15:33:26.000000000 -0400
+++ b/data/Makefile.am	2017-12-06 18:09:46.685295795 -0500
@@ -180,8 +180,6 @@
 
 systemdsystemunit =
 
-if HAVE_SYSTEMD
-
 gdm.service: $(srcdir)/gdm.service.in
 	$(AM_V_GEN)sed \
 		-e 's,[@]sbindir[@],$(sbindir),g' \
@@ -193,8 +191,6 @@
 systemdsystemunit += gdm.service
 CLEANFILES += gdm.service
 
-endif
-
 EXTRA_DIST += gdm.service.in
 
 uninstall-hook:
diff '--exclude=.git' -urN a/data/pam-redhat/gdm-autologin.pam b/data/pam-redhat/gdm-autologin.pam
--- a/data/pam-redhat/gdm-autologin.pam	2015-09-18 08:46:28.000000000 -0400
+++ b/data/pam-redhat/gdm-autologin.pam	2017-12-06 18:08:04.287803857 -0500
@@ -8,7 +8,6 @@
 session    required    pam_selinux.so close
 session    required    pam_loginuid.so
 session    optional    pam_console.so
--session    optional    pam_ck_connector.so
 session    required    pam_selinux.so open
 session    optional    pam_keyinit.so force revoke
 session    required    pam_namespace.so
diff '--exclude=.git' -urN a/data/pam-redhat/gdm-fingerprint.pam b/data/pam-redhat/gdm-fingerprint.pam
--- a/data/pam-redhat/gdm-fingerprint.pam	2015-09-18 08:46:28.000000000 -0400
+++ b/data/pam-redhat/gdm-fingerprint.pam	2017-12-06 18:08:04.287803857 -0500
@@ -9,7 +9,6 @@
 session     required      pam_selinux.so close
 session     required      pam_loginuid.so
 session     optional      pam_console.so
--session    optional    pam_ck_connector.so
 session     required      pam_selinux.so open
 session     optional      pam_keyinit.so force revoke
 session     required      pam_namespace.so
diff '--exclude=.git' -urN a/data/pam-redhat/gdm-password.pam b/data/pam-redhat/gdm-password.pam
--- a/data/pam-redhat/gdm-password.pam	2015-09-18 08:46:28.000000000 -0400
+++ b/data/pam-redhat/gdm-password.pam	2017-12-06 18:08:04.287803857 -0500
@@ -12,7 +12,6 @@
 session     required      pam_selinux.so close
 session     required      pam_loginuid.so
 session     optional      pam_console.so
--session    optional    pam_ck_connector.so
 session     required      pam_selinux.so open
 session     optional      pam_keyinit.so force revoke
 session     required      pam_namespace.so
diff '--exclude=.git' -urN a/data/pam-redhat/gdm-pin.pam b/data/pam-redhat/gdm-pin.pam
--- a/data/pam-redhat/gdm-pin.pam	2015-09-18 08:46:28.000000000 -0400
+++ b/data/pam-redhat/gdm-pin.pam	2017-12-06 18:08:04.287803857 -0500
@@ -13,7 +13,6 @@
 session     required      pam_selinux.so close
 session     required      pam_loginuid.so
 session     optional      pam_console.so
--session    optional    pam_ck_connector.so
 session     required      pam_selinux.so open
 session     optional      pam_keyinit.so force revoke
 session     required      pam_namespace.so
diff '--exclude=.git' -urN a/data/pam-redhat/gdm-smartcard.pam b/data/pam-redhat/gdm-smartcard.pam
--- a/data/pam-redhat/gdm-smartcard.pam	2015-09-18 08:46:28.000000000 -0400
+++ b/data/pam-redhat/gdm-smartcard.pam	2017-12-06 18:08:04.287803857 -0500
@@ -9,7 +9,6 @@
 session     required      pam_selinux.so close
 session     required      pam_loginuid.so
 session     optional      pam_console.so
--session    optional    pam_ck_connector.so
 session     required      pam_selinux.so open
 session     optional      pam_keyinit.so force revoke
 session     required      pam_namespace.so
diff '--exclude=.git' -urN a/libgdm/gdm-user-switching.c b/libgdm/gdm-user-switching.c
--- a/libgdm/gdm-user-switching.c	2015-09-18 15:33:26.000000000 -0400
+++ b/libgdm/gdm-user-switching.c	2017-12-06 18:08:04.287803857 -0500
@@ -31,25 +31,12 @@
 #include <glib-object.h>
 #include <gio/gio.h>
 
-#ifdef WITH_SYSTEMD
 #include <systemd/sd-login.h>
-#endif
 
 #include "common/gdm-common.h"
 #include "gdm-user-switching.h"
 #include "gdm-client.h"
 
-#ifdef WITH_CONSOLE_KIT
-#define CK_NAME      "org.freedesktop.ConsoleKit"
-#define CK_PATH      "/org/freedesktop/ConsoleKit"
-#define CK_INTERFACE "org.freedesktop.ConsoleKit"
-
-#define CK_MANAGER_PATH      "/org/freedesktop/ConsoleKit/Manager"
-#define CK_MANAGER_INTERFACE "org.freedesktop.ConsoleKit.Manager"
-#define CK_SEAT_INTERFACE    "org.freedesktop.ConsoleKit.Seat"
-#define CK_SESSION_INTERFACE "org.freedesktop.ConsoleKit.Session"
-#endif
-
 static gboolean
 create_transient_display (GDBusConnection *connection,
                           GCancellable    *cancellable,
@@ -80,304 +67,12 @@
         return TRUE;
 }
 
-#ifdef WITH_CONSOLE_KIT
-
-static gboolean
-get_current_session_id (GDBusConnection  *connection,
-                        char            **session_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             CK_MANAGER_PATH,
-                                             CK_MANAGER_INTERFACE,
-                                             "GetCurrentSession",
-                                             NULL, /* parameters */
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine session: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(o)", session_id);
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
-static gboolean
-get_seat_id_for_session (GDBusConnection  *connection,
-                         const char       *session_id,
-                         char            **seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             session_id,
-                                             CK_SESSION_INTERFACE,
-                                             "GetSeatId",
-                                             NULL, /* parameters */
-                                             G_VARIANT_TYPE ("(o)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine seat: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(o)", seat_id);
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
-static char *
-get_current_seat_id (GDBusConnection *connection)
-{
-        gboolean res;
-        char    *session_id;
-        char    *seat_id;
-
-        session_id = NULL;
-        seat_id = NULL;
-
-        res = get_current_session_id (connection, &session_id);
-        if (res) {
-                res = get_seat_id_for_session (connection, session_id, &seat_id);
-        }
-        g_free (session_id);
-
-        return seat_id;
-}
-
-static gboolean
-activate_session_id_for_ck (GDBusConnection *connection,
-                            GCancellable    *cancellable,
-                            const char      *seat_id,
-                            const char      *session_id,
-                            GError         **error)
-{
-        GVariant *reply;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "ActivateSession",
-                                             g_variant_new ("(o)", session_id),
-                                             NULL,
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, error);
-        if (reply == NULL) {
-                g_prefix_error (error, _("Unable to activate session: "));
-                return FALSE;
-        }
-
-        g_variant_unref (reply);
-
-        return TRUE;
-}
-
 static gboolean
-session_is_login_window (GDBusConnection *connection,
-                         const char      *session_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        const char *value;
-        gboolean ret;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             session_id,
-                                             CK_SESSION_INTERFACE,
-                                             "GetSessionType",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(s)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine session type: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(&s)", &value);
-
-        if (value == NULL || value[0] == '\0' || strcmp (value, "LoginWindow") != 0) {
-                ret = FALSE;
-        } else {
-                ret = TRUE;
-        }
-
-        g_variant_unref (reply);
-
-        return ret;
-}
-
-static gboolean
-seat_can_activate_sessions (GDBusConnection *connection,
-                            const char      *seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        gboolean ret;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "CanActivateSessions",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(b)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to determine if can activate sessions: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(b)", &ret);
-        g_variant_unref (reply);
-
-        return ret;
-}
-
-static const char **
-seat_get_sessions (GDBusConnection *connection,
-                   const char      *seat_id)
-{
-        GError *local_error = NULL;
-        GVariant *reply;
-        const char **value;
-
-        reply = g_dbus_connection_call_sync (connection,
-                                             CK_NAME,
-                                             seat_id,
-                                             CK_SEAT_INTERFACE,
-                                             "GetSessions",
-                                             NULL,
-                                             G_VARIANT_TYPE ("(ao)"),
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL, &local_error);
-        if (reply == NULL) {
-                g_warning ("Unable to list sessions: %s", local_error->message);
-                g_error_free (local_error);
-                return FALSE;
-        }
-
-        g_variant_get (reply, "(^ao)", &value);
-        g_variant_unref (reply);
-
-        return value;
-}
-
-static gboolean
-get_login_window_session_id_for_ck (GDBusConnection  *connection,
-                                    const char       *seat_id,
-                                    char            **session_id)
-{
-        gboolean     can_activate_sessions;
-        const char **sessions;
-        int          i;
-
-        *session_id = NULL;
-        sessions = NULL;
-
-        g_debug ("checking if seat can activate sessions");
-
-        can_activate_sessions = seat_can_activate_sessions (connection, seat_id);
-        if (! can_activate_sessions) {
-                g_debug ("seat is unable to activate sessions");
-                return FALSE;
-        }
-
-        sessions = seat_get_sessions (connection, seat_id);
-        for (i = 0; sessions [i] != NULL; i++) {
-                const char *ssid;
-
-                ssid = sessions [i];
-
-                if (session_is_login_window (connection, ssid)) {
-                        *session_id = g_strdup (ssid);
-                        break;
-                }
-        }
-        g_free (sessions);
-
-        return TRUE;
-}
-
-static gboolean
-goto_login_session_for_ck (GDBusConnection  *connection,
-                           GCancellable     *cancellable,
-                           GError          **error)
-{
-        gboolean        ret;
-        gboolean        res;
-        char           *session_id;
-        char           *seat_id;
-
-        ret = FALSE;
-
-        /* First look for any existing LoginWindow sessions on the seat.
-           If none are found, create a new one. */
-
-        seat_id = get_current_seat_id (connection);
-        if (seat_id == NULL || seat_id[0] == '\0') {
-                g_debug ("seat id is not set; can't switch sessions");
-                g_set_error (error, GDM_CLIENT_ERROR, 0, _("Could not identify the current session."));
-
-                return FALSE;
-        }
-
-        res = get_login_window_session_id_for_ck (connection, seat_id, &session_id);
-        if (! res) {
-                g_set_error (error, GDM_CLIENT_ERROR, 0, _("User unable to switch sessions."));
-                return FALSE;
-        }
-
-        if (session_id != NULL) {
-                res = activate_session_id_for_ck (connection, cancellable, seat_id, session_id, error);
-                if (res) {
-                        ret = TRUE;
-                }
-        }
-
-        if (! ret && g_strcmp0 (seat_id, "/org/freedesktop/ConsoleKit/Seat1") == 0) {
-                res = create_transient_display (connection, cancellable, error);
-                if (res) {
-                        ret = TRUE;
-                }
-        }
-
-        return ret;
-}
-#endif
-
-#ifdef WITH_SYSTEMD
-
-static gboolean
-activate_session_id_for_systemd (GDBusConnection  *connection,
-                                 GCancellable     *cancellable,
-                                 const char       *seat_id,
-                                 const char       *session_id,
-                                 GError          **error)
+activate_session_id (GDBusConnection  *connection,
+                     GCancellable     *cancellable,
+                     const char       *seat_id,
+                     const char       *session_id,
+                     GError          **error)
 {
         GVariant *reply;
 
@@ -402,8 +97,8 @@
 }
 
 static gboolean
-get_login_window_session_id_for_systemd (const char  *seat_id,
-                                         char       **session_id)
+get_login_window_session_id (const char  *seat_id,
+                             char       **session_id)
 {
         gboolean   ret;
         int        res, i;
@@ -487,9 +182,9 @@
 }
 
 static gboolean
-goto_login_session_for_systemd (GDBusConnection  *connection,
-                                GCancellable     *cancellable,
-                                GError          **error)
+goto_login_session (GDBusConnection  *connection,
+                    GCancellable     *cancellable,
+                    GError          **error)
 {
         gboolean        ret;
         int             res;
@@ -543,9 +238,9 @@
                 return FALSE;
         }
 
-        res = get_login_window_session_id_for_systemd (seat_id, &session_id);
+        res = get_login_window_session_id (seat_id, &session_id);
         if (res && session_id != NULL) {
-                res = activate_session_id_for_systemd (connection, cancellable, seat_id, session_id, error);
+                res = activate_session_id (connection, cancellable, seat_id, session_id, error);
 
                 if (res) {
                         ret = TRUE;
@@ -564,11 +259,10 @@
 
         return ret;
 }
-#endif
 
 gboolean
 gdm_goto_login_session_sync (GCancellable  *cancellable,
-			     GError       **error)
+                             GError       **error)
 {
         GDBusConnection *connection;
         gboolean retval;
@@ -577,23 +271,8 @@
         if (!connection)
                 return FALSE;
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                retval = goto_login_session_for_systemd (connection,
-                                                         cancellable,
-                                                         error);
-
-                g_object_unref (connection);
-                return retval;
-        }
-#endif
-
-#ifdef WITH_CONSOLE_KIT
-        retval = goto_login_session_for_ck (connection, cancellable, error);
+        retval = goto_login_session (connection, cancellable, error);
 
         g_object_unref (connection);
         return retval;
-#else
-        return FALSE;
-#endif
 }
